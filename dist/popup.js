!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=92)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var i=n(2),o=n(1),a=n(6),r=n(7),s=n(8),c=n(9),l=n(10),p=n(11),u=n(12),d=n(13),f=n(14),h=n(15),m=n(16),g=n(17),v=(window.chrome,function(){function e(e,t,n){this.data={},this.tag=t,this.name=e,this.data=n}return e.prototype.register=function(){e.languages.push(this)},e.prototype.get=function(e,t){for(var n=e.split(/\./g),i=this.data,o=0,a=n;o<a.length;o++){i=i[a[o]]}if(void 0!==t)for(var r in t)i=i.split("{{"+r+"}}").join(t[r]);return i},e.prototype.setDefault=function(){e.default=this},e.load=function(e){var t=this;void 0===e&&(e=function(){}),o.c.LANGUAGE.get((function(n){var a=n[o.c.LANGUAGE.tag];void 0!==a&&"automatic"!==a||(a=t.automatic()),i.a.info("Using language configuration "+a),t.languages.forEach((function(n,i){n.tag===a&&(t.current=n),i===t.languages.length-1&&e()}))}))},e.set=function(e){this.current=e},e.automatic=function(){var e=this;return window.navigator.languages.find((function(t){return t.length>=5&&(void 0===e.default||t!==e.default.tag)}))},e.init=function(){new e("Deutsche (DE)","de-DE",p).register(),new e("Español (ES)","es-ES",l).register();var t=new e("English (US)","en-US",a);t.register(),t.setDefault(),new e("Français (FR)","fr-FR",s).register(),new e("Italiano (IT)","it-IT",c).register(),new e("Svenska (SE)","sv-SE",r).register(),new e("Українська (UA)","uk-UA",u).register(),new e("Euskara (EU)","eu-ES",d).register(),new e("Galego (GL)","gl-ES",f).register(),new e("русский (RU)","ru-RU",h).register(),new e("Nederlands (BE)","nl-BE",m).register(),new e("Português (BR)","pt-BR",g).register()},e.get=function(e,t){return void 0===this.current&&(this.current=this.default),this.current.get(e,t)},e.languages=[],e}())},function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"b",(function(){return r}));var i=window.chrome,o=function(){function e(e,t){this.name=e,this.tag=t}return e.prototype.get=function(e){void 0===e&&(e=function(){}),i.storage.local.get([this.tag],e)},e.prototype.set=function(e,t){var n;void 0===t&&(t=function(){}),i.storage.local.set(((n={})[this.tag]=e,n),t)},e.get=function(e,t){void 0===t&&(t=function(){}),i.storage.local.get(e.map((function(e){return e.tag})),t)},e.set=function(e,t){void 0===t&&(t=function(){}),i.storage.local.set(e,t)},e.clear=function(){i.storage.local.clear()},e.CODEC=new e("Codec","codec"),e.RESOLUTION=new e("Resolution","resolution"),e.MONITOR_STATS=new e("Monitor Stats","monitor-stats"),e.CACHE_VERSION=new e("Cache Version","cache-version"),e}(),a=function(){function e(e,t){this.name=e,this.tag=t}return e.prototype.get=function(e){void 0===e&&(e=function(){}),i.storage.sync.get([this.tag],e)},e.prototype.set=function(e,t){var n;void 0===t&&(t=function(){}),i.storage.sync.set(((n={})[this.tag]=e,n),t)},e.get=function(e,t){void 0===t&&(t=function(){}),i.storage.sync.get(e.map((function(e){return e.tag})),t)},e.set=function(e,t){void 0===t&&(t=function(){}),i.storage.sync.set(e,t)},e.clear=function(){i.storage.sync.clear()},e.LIBRARY_GAMES=new e("Library Games","games"),e.LIBRARY_SORT_ORDER=new e("Sort Order","sort-order"),e.LIBRARY_SORT_DIRECTION=new e("Sort Direction","sort-direction"),e.LANGUAGE=new e("Language","language"),e.COMPONENTS=new e("Components","components"),e}(),r=function(){function e(e){this.appdata=e}return e.prototype.checkCacheVersion=function(e){var t=this;o.CACHE_VERSION.get((function(e){var n=e[o.CACHE_VERSION.tag];(void 0===n||t.appdata["cache-version"]>n)&&(t.appdata["clear-keys"].local.forEach((function(e){var t;o.set(((t={})[e]=null,t))})),t.appdata["clear-keys"].sync.forEach((function(e){var t;a.set(((t={})[e]=null,t))}))),o.CACHE_VERSION.set(t.appdata["cache-version"])}))},e}()},function(e,t,n){"use strict";var i="[Stadia+]",o=function(){this.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log(i+" %c📃 "+e.join(" "),"color: black")},this.warning=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log(i+" %c😟 "+e.join(" "),"color: orange")},this.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log(i+" %c❌ "+e.join(" "),"color: red; font-weight: 700")},this.component=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log(i+" %c🧩 "+e.join(" "),"color: darkgreen")},this.image=function(e,t,n){var i=function(e,t){return{string:"+",style:"font-size: 1px; padding: "+Math.floor(t/2)+"px "+Math.floor(e/2)+"px; line-height: 0;"}}(t,n);console.log("%c"+i.string,i.style+"background: url("+e+"); background-size: "+t+"px "+n+"px; color: transparent;")}};t.a=new o},function(e,t,n){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),r=[];function s(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},i=[],o=0;o<e.length;o++){var a=e[o],c=t.base?a[0]+t.base:a[0],l=n[c]||0,p="".concat(c," ").concat(l);n[c]=l+1;var u=s(p),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(r[u].references++,r[u].updater(d)):r.push({identifier:p,updater:g(d,t),references:1}),i.push(p)}return i}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var r=a(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var p,u=(p=[],function(e,t){return p[e]=t,p.filter(Boolean).join("\n")});function d(e,t,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var a=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(a,r[t]):e.appendChild(a)}}function f(e,t,n){var i=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var h=null,m=0;function g(e,t){var n,i,o;if(t.singleton){var a=m++;n=h||(h=l(t)),i=d.bind(null,n,a,!1),o=d.bind(null,n,a,!0)}else n=l(t),i=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=s(n[i]);r[o].references--}for(var a=c(e,t),l=0;l<n.length;l++){var p=s(n[l]);0===r[p].references&&(r[p].updater(),r.splice(p,1))}n=a}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(r=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),a=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var r,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var a=0;a<this.length;a++){var r=this[a][0];null!=r&&(o[r]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);i&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return r}));var i=n(18),o=n.n(i),a=(n(30),n(32),function(){function e(e,t){this.element=e,t.style=void 0!==t.style?t.style:r.DARK,t.onChange=void 0!==t.onChange?t.onChange:function(){},t.beforeChange=void 0!==t.beforeChange?t.beforeChange:function(){},this.element.classList.add("stadiaplus_dropdown",t.style);try{this.slimselect=new o.a({select:this.element,showSearch:!1,placeholder:t.placeholder,onChange:t.onChange,beforeOnChange:t.beforeChange})}catch(e){}}return e.prototype.disable=function(){this.element.classList.add("disabled")},e.prototype.enable=function(){this.element.classList.remove("disabled")},e.prototype.get=function(){return this.slimselect.selected()},e.prototype.set=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];1===e.length?this.slimselect.set(e[0]):this.slimselect.setData(e)},e.prototype.search=function(e){return this.slimselect.search(e)},e.prototype.destroy=function(){void 0!==this.slimselect&&this.slimselect.destroy(),this.element.classList.remove("stadiaplus_dropdown"),this.element=null},e}()),r=function(){function e(){}return e.SLIMSELECT=null,e.SLIMSELECT_LARGE="style-slimselect-large",e.LIGHT="style-light",e.DARK="style-dark",e}()},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Developed by {{name}}"},"main-page":{"title":"Stadia+","ready-text":"The extension is all ready to go. Just fire up Stadia and start playing! 🎮","launch-button":"Launch Stadia","help-button":"Help & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Settings","language":"Language","components":"Components","edit-components":"Edit Components"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"},"component-page":{"title":"Components"}},"component":{"enabled":"Component {{name}} has been enabled.","disabled":"Component {{name}} has been disabled."},"allow-windowed-mode":{"name":"Allow Windowed Mode","button-label":{"windowed":"Windowed","fullscreen":"Fullscreen"}},"clock":{"name":"Clock"},"force-codec":{"name":"Force Codec","4k-tooltip":"Forced Codec is not available when running in 4K"},"force-resolution":{"name":"Force Resolution","note":"Note: the set value is the maximum resolution Stadia will attempt to achieve. If your computer is not capable of rendering the resolution or it is not available with the current data usage option, it will not be displayed."},"library-filter":{"name":"Library Filter","recent":"Recent","alphabetical":"Alphabetical","random":"Random","show-hidden":"Show Hidden"},"network-monitor":{"name":"Network Monitor","heading-visible":"Visible Stats","button-label":"Monitor","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Paste from Clipboard"},"ratings":{"name":"Ratings","source-name":"Metacritic"},"store-filter":{"name":"Store Filter"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Reload the page to see your changes.","hide-game":"A game has been hidden.","show-game":"A game is no longer hidden."},"automatic":"Automatic","vp9":"VP9","h264":"H264","apply":"Apply","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Utvecklat av {{name}}"},"main-page":{"title":"Stadia+","ready-text":"Tillägget är redo att köra. Bara starta Stadia och börja spela! 🎮","launch-button":"Starta Stadia","help-button":"Hjälp & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Inställningar","language":"Språk","components":"Komponenter","edit-components":"Redigera Komponenter"},"developer-page":{"title":"Utvecklare","clear-cache-button":"Rensa Cache","storage":"Lagring"},"component-page":{"title":"Komponenter"}},"component":{"enabled":"Komponenten {{name}} är nu aktiverad.","disabled":"Komponenten {{name}} är inte längre aktiverad."},"allow-windowed-mode":{"name":"Tillåt Fönsterläge","button-label":{"windowed":"Fönster","fullscreen":"Fullskärm"}},"clock":{"name":"Klocka"},"force-codec":{"name":"Påtvigad Codec","4k-tooltip":"Påtvingad Codec är inte tillgängligt när du spelar i 4K"},"force-resolution":{"name":"Påtvingad Upplösning","note":"Observera: det satta värdet är den maximala upplösningen Stadia kommer försöka uppnå. Om din dator inte klarar av att rendera upplösningen eller den inte är tillgänglig med dina nuvarande datainställningar kommer inte den påtvingade upplösningen visas."},"library-filter":{"name":"Biblioteksfilter","recent":"Senaste","alphabetical":"Alfabetiskt","random":"Slumpmässigt","show-hidden":"Visa Gömda"},"network-monitor":{"name":"Nätverksövervakning","heading-visible":"Synlig Statistik","button-label":"Övervakning","toggle-button":{"show":"Visa Nätverksövervakning","hide":"Göm Nätverksövervakning"},"stats":{"time":"Tid","resolution":"Upplösning","fps":"FPS","latency":"Latens","codec":"Codec","traffic":"Nätverkstrafik","current-traffic":"Nuvarande Trafik","average-traffic":"Genomsnittlig Trafik","packets-lost":"Paket Tappade","average-packet-loss":"Pakettappning","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Klistra in från Urklipp"},"ratings":{"name":"Recensioner","source-name":"Metacritic"},"store-filter":{"name":"Butiksfiltrering"},"ui-tab":{"name":"Stadia+ Gränssnittstabb","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Uppdatera sidan för att se dina ändringar.","hide-game":"Ett spel har gömts.","show-game":"Ett spel är inte längre gömt."},"automatic":"Automatisk","vp9":"VP9","h264":"H264","apply":"Tillämpa","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Développé par {{name}}"},"main-page":{"title":"Stadia+","ready-text":"L\'extension est prête. Lancez Stadia et commencez à jouer! 🎮","launch-button":"Lancer Stadia","help-button":"Aide & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Paramètres","language":"Langue","components":"Components","edit-components":"Edit Components"},"developer-page":{"title":"Développeur","clear-cache-button":"Vider le cache","storage":"Stockage"},"component-page":{"title":"Components"}},"component":{"enabled":"Le composant {{name}} a été activé.","disabled":"Le composant {{name}} a été désactivé."},"allow-windowed-mode":{"name":"Allow Windowed Mode","button-label":{"windowed":"Windowed","fullscreen":"Fullscreen"}},"clock":{"name":"Horloge"},"force-codec":{"name":"Forcer le codec","4k-tooltip":"Forced Codec is not available when running in 4K"},"force-resolution":{"name":"Forcer la résolution","note":"Remarque: la valeur définie est la résolution maximale que Stadia tentera d\'atteindre. Si votre ordinateur ne peut pas afficher cette résolution ou que l\'option de consommation des données ne le permet pas, elle ne sera pas utilisée."},"library-filter":{"name":"Filtre de la bibliothèque","recent":"Récent","alphabetical":"Alphabétique","random":"Aléatoire","show-hidden":"Montrer caché(s)"},"network-monitor":{"name":"Moniteur réseau","heading-visible":"Statistiques visibles","button-label":"Moniteur","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Coller depuis le presse-papiers"},"ratings":{"name":"Évaluations","source-name":"Métacritique"},"store-filter":{"name":"Filtre du magasin"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Rechargez la page pour voir vos modifications.","hide-game":"Un jeu a été caché.","show-game":"Un jeu n\'est plus caché."},"automatic":"Automatique","vp9":"VP9","h264":"H264","apply":"Appliquer","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Sviluppato da {{name}}"},"main-page":{"title":"Stadia+","ready-text":"L\'estensione è pronta per l\'uso. Avvia Stadia e inizia a giocare! 🎮","launch-button":"Avvia Stadia","help-button":"Aiuto & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Impostazioni","language":"Lingua","components":"Componenti","edit-components":"Modifica Componenti"},"developer-page":{"title":"Sviluppatore","clear-cache-button":"Pulisci Cache","storage":"Archiviazione"},"component-page":{"title":"Componenti"}},"component":{"enabled":"Il componente {{name}} è stato attivato.","disabled":"Il componente {{name}} è stato disattivato."},"allow-windowed-mode":{"name":"Consentire la Modalità Finestra","button-label":{"windowed":"Finestra","fullscreen":"Schermo Intero"}},"clock":{"name":"Orologio"},"force-codec":{"name":"Forza Codec","4k-tooltip":"Non è possibile forzare il codec quando si è in 4K"},"force-resolution":{"name":"Forza Risoluzione","note":"Nota: il valore impostato è la massima risoluzione che Stadia tenterà di raggiungere. Se il tuo computer non è in grado di renderizzare la risoluzione, o non è disponibile con l\'opzione di utilizzo dei dati corrente, questa non verrà visualizzata."},"library-filter":{"name":"Filtro Libreria","recent":"Recente","alphabetical":"Alfabetico","random":"Casuale","show-hidden":"Mostra Nascosti"},"network-monitor":{"name":"Monitor di Rete","heading-visible":"Statistiche Visibili","button-label":"Monitor","toggle-button":{"show":"Mostra Monitor di Rete","hide":"Nascondi Monitor di Rete"},"stats":{"time":"Orario","resolution":"Risoluzione","fps":"FPS","latency":"Latenza","codec":"Codec","traffic":"Traffico","current-traffic":"Traffico Attuale","average-traffic":"Traffico Medio","packets-lost":"Pacchetti Persi","average-packet-loss":"Perdita Media di Pacchetti","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Incolla dagli Appunti"},"ratings":{"name":"Valutazioni","source-name":"Metacritic"},"store-filter":{"name":"Filtro Negozio"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Ricarica la pagina per vedere i cambiamenti.","hide-game":"Un gioco è stato nascosto.","show-game":"Un gioco non è più nascosto."},"automatic":"Automatico","vp9":"VP9","h264":"H264","apply":"Applica","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Developed by {{name}}"},"main-page":{"title":"Stadia+","ready-text":"The extension is all ready to go. Just fire up Stadia and start playing! 🎮","launch-button":"Launch Stadia","help-button":"Help & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Settings","language":"Language","components":"Components","edit-components":"Edit Components"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"},"component-page":{"title":"Components"}},"component":{"enabled":"El componente {{name}}  ha sido habilitado.","disabled":"El componente {{name}} ha sido deshabilitado."},"allow-windowed-mode":{"name":"Allow Windowed Mode","button-label":{"windowed":"Windowed","fullscreen":"Fullscreen"}},"clock":{"name":"Reloj"},"force-codec":{"name":"Fuerza Códec","4k-tooltip":"Forced Codec is not available when running in 4K"},"force-resolution":{"name":"Fuerza Resolución","note":"Nota: el valor establecido es la resolución máxima que Stadia intentará lograr. Si su computadora no es capaz de procesar la resolución o no está disponible con la opción de uso de datos actual, no se mostrará."},"library-filter":{"name":"Filtro Biblioteca","recent":"Reciente","alphabetical":"Alfabético","random":"Aleatorio","show-hidden":"Mostrar oculto"},"network-monitor":{"name":"Monitor de red","heading-visible":"Estadísticas visibles","button-label":"Monitor","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Pegar desde el portapapeles"},"ratings":{"name":"Calificaciones","source-name":"Metacrítico"},"store-filter":{"name":"Filtro de tienda"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Vuelva a cargar la página para ver sus cambios.","hide-game":"Un juego ha sido escondido.","show-game":"Un juego ya no está oculto."},"automatic":"Automático","vp9":"VP9","h264":"H264","apply":"Aplicar","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Developed by {{name}}"},"main-page":{"title":"Stadia+","ready-text":"The extension is all ready to go. Just fire up Stadia and start playing! 🎮","launch-button":"Launch Stadia","help-button":"Help & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Settings","language":"Language","components":"Components","edit-components":"Edit Components"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"},"component-page":{"title":"Components"}},"component":{"enabled":"Komponente {{name}} wurde aktiviert.","disabled":"Komponente {{name}} wurde deaktiviert."},"allow-windowed-mode":{"name":"Allow Windowed Mode","button-label":{"windowed":"Windowed","fullscreen":"Fullscreen"}},"clock":{"name":"Uhr"},"force-codec":{"name":"Codec erzwingen","4k-tooltip":"Forced Codec is not available when running in 4K"},"force-resolution":{"name":"Auflösung erzwingen","note":"Anmerkung: Die gewählte Auflösung ist die Maximale, die Stadia verweden wird. Falls Ihr Computer diese Auflösung nicht darstellen kann oder nicht genug Bandbreite zu Verfügung steht, wird eine kleinere Auflösung verwendet."},"library-filter":{"name":"Sammlungsfilter","recent":"Neuste","alphabetical":"Alphabetisch","random":"Zufällig","show-hidden":"Zeige Versteckte"},"network-monitor":{"name":"Netwerkmonitor","heading-visible":"Sichtbare Statistiken","button-label":"Monitor","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Einfügen aus der Zwischenablage"},"ratings":{"name":"Bewertungen","source-name":"Metacritic"},"store-filter":{"name":"Store Filter"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Seite neu laden um die Änderung anzuzeigen.","hide-game":"Ein Spiel wurde versteckt.","show-game":"Ein Spiel ist nicht mehr versteckt."},"automatic":"Automatisch","vp9":"VP9","h264":"H264","apply":"Anwenden","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Розробник: {{name}}"},"main-page":{"title":"Stadia+","ready-text":"Розширення готове до роботи. Просто запустіть Stadia і почніть грати! 🎮","launch-button":"Запустити Stadia","help-button":"Довідка та поширені запитання","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Налаштування","language":"Мова","components":"Components","edit-components":"Edit Components"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"},"component-page":{"title":"Components"}},"component":{"enabled":"Компонент {{name}} увімкнено.","disabled":"Компонент {{name}} вимкнено."},"allow-windowed-mode":{"name":"Allow Windowed Mode","button-label":{"windowed":"Windowed","fullscreen":"Fullscreen"}},"clock":{"name":"Годинник"},"force-codec":{"name":"Примусити кодек","4k-tooltip":"Forced Codec is not available when running in 4K"},"force-resolution":{"name":"Примусити розширення","note":"Примітка: встановлене значення - це максимальна роздільна здатність, яку Stadia намагатиметься досягти. Якщо ваш комп\'ютер не здатний рендерувати роздільну здатність або він недоступний із поточною опцією використання даних, він не відображатиметься."},"library-filter":{"name":"Фільтрувати","recent":"Останні","alphabetical":"Алфавітний","random":"Випадкові","show-hidden":"Показати приховані"},"network-monitor":{"name":"Моніторинг мережі","heading-visible":"Видима статистика","button-label":"Монітор","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Вставити з буфера обміну"},"ratings":{"name":"Рейтинги","source-name":"Metacritic"},"store-filter":{"name":"Зберегти фільтр"},"ui-tab":{"name":"Stadia+ UI Вкладка","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Перезавантажте сторінку, щоб побачити зміни.","hide-game":"Гра прихована.","show-game":"Гра більше не є прихованою."},"automatic":"Автоматично","vp9":"VP9","h264":"H264","apply":"Apply","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Egilea: {{name}}"},"main-page":{"title":"Stadia+","ready-text":"Luzapena prest dago. Ireki Stadia eta hasi jolasten! Egurra! 🎮","launch-button":"Ireki Stadia","help-button":"Laguntza & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Ezarpenak","language":"Hizkuntza","components":"Osagarriak","edit-components":"Editatu osagarriak"},"developer-page":{"title":"Aurreratuak","clear-cache-button":"Cachea ezabatu","storage":"Biltegia"},"component-page":{"title":"Osagarriak"}},"component":{"enabled":"{{name}} gaitu egin da.","disabled":"{{name}} desgaitu egin da."},"allow-windowed-mode":{"name":"Onartu lehio-modua","button-label":{"windowed":"Lehioan","fullscreen":"Pantaila osoa"}},"clock":{"name":"Erlojua"},"force-codec":{"name":"Behartu codec","4k-tooltip":"Codec hori ezin da gaitu 4K aukerarekin"},"force-resolution":{"name":"Behartu bereizmena","note":"Oharra: jarritako balioa izango da Stadia ezartzen saiatuko den handiena. Zure ordenagailuak ezin badu bereizmen hori exekutatu  edota ez badator bat Stadiaren zure data-ezarpenekin ezin izango da gauzatu.."},"library-filter":{"name":"Bildumaren iragazkia","recent":"Arestikoak","alphabetical":"Alfabetikoa","random":"Aliritzira","show-hidden":"Erakutsi izkutatutakoak"},"network-monitor":{"name":"Sare-monitorea","heading-visible":"Ikusteko estatistikak","button-label":"Monitorea","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Itsatsi arbelean"},"ratings":{"name":"Balorazioak","source-name":"Metacritic"},"store-filter":{"name":"Denda-iragazkia"},"ui-tab":{"name":"Stadia+ UI Fitxa","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Orria birkargatu ezarritako aldaketak abiarazteko.","hide-game":"Joku bat izkutatu egin da.","show-game":"Joku bat jada ikusgai dago."},"automatic":"Automatikoa","vp9":"VP9","h264":"H264","apply":"Ezarri","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Creado por {{name}}"},"main-page":{"title":"Stadia+","ready-text":"A extensión está lista. Inicia Stadia e lume! 🎮","launch-button":"Inicia Stadia","help-button":"Axuda & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Configuración","language":"Idioma","components":"Compoñentes","edit-components":"Edita os compoñentes"},"developer-page":{"title":"Avanzadas","clear-cache-button":"Limpa a caché","storage":"Almacenamento"},"component-page":{"title":"Compoñentes"}},"component":{"enabled":"Activouse {{name}}.","disabled":"Desactivouse {{name}}."},"allow-windowed-mode":{"name":"Permite o modo fiestra","button-label":{"windowed":"En fiestra","fullscreen":"Pantalla completa"}},"clock":{"name":"Reloxo"},"force-codec":{"name":"Forza códec","4k-tooltip":"O códec seleccionado non está disponíbel ao seleccionar 4K"},"force-resolution":{"name":"Forza resolución","note":"Aviso: o valor indicado será o máximo que Stadia intentará acadar. Se o teu computador non é compatíbel coa resolución ou esta supera o uso de datos que teñas configurado na conta, non se activará."},"library-filter":{"name":"Filtrar","recent":"Recentes","alphabetical":"Alfabeticamente","random":"Aleatoriamente","show-hidden":"Mostrar agochados"},"network-monitor":{"name":"Monitor de rede","heading-visible":"Estatísticas","button-label":"Monitor","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Pegar do portapapeis"},"ratings":{"name":"Valoracións","source-name":"Metacritic"},"store-filter":{"name":"Filtrar"},"ui-tab":{"name":"Pestaña UI de Stadia+","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Recarga a páxina para activar os cambios.","hide-game":"Agochóuse un xogo.","show-game":"Un xogo deixou de estar agochado."},"automatic":"Automático","vp9":"VP9","h264":"H264","apply":"Aplicar","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Разработчик: {{name}}"},"main-page":{"title":"Stadia+","ready-text":"Расширение готово к работе. Запускай Stadia и начинай играть! 🎮","launch-button":"Запустить Stadia","help-button":"Справка и FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Настройки","language":"Язык","components":"Components","edit-components":"Edit Components"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"},"component-page":{"title":"Components"}},"component":{"enabled":"Элемент {{name}} включён.","disabled":"Элемент {{name}} отключен."},"allow-windowed-mode":{"name":"Allow Windowed Mode","button-label":{"windowed":"Windowed","fullscreen":"Fullscreen"}},"clock":{"name":"Часы"},"force-codec":{"name":"Принудительный запуск кодека","4k-tooltip":"Forced Codec is not available when running in 4K"},"force-resolution":{"name":"Принудительная смена разрешения","note":"Примечание: установливаемое значение - это максимальное разрешение, которое Stadia может достичь. Если ваш компьютер не может отобразить разрешение или оно не доступно с текущей скоростью передачи данных, оно не будет отображаться."},"library-filter":{"name":"Фильтр","recent":"Последние","alphabetical":"Алфавитный","random":"Случайные","show-hidden":"Показать скрытые"},"network-monitor":{"name":"Мониторинг сети","heading-visible":"Видимая статистика","button-label":"Монитор","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"paste-from-clipboard":{"name":"Вставить из буфера обмена"},"ratings":{"name":"Рейтинги","source-name":"Metacritic"},"store-filter":{"name":"Сохранить фильтр"},"ui-tab":{"name":"Stadia+ UI Вкладка","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Перезагрузите страницу, чтобы увидеть изменения.","hide-game":"Игра скрыта.","show-game":"Игра теперь отображается."},"automatic":"Автоматически","vp9":"VP9","h264":"H264","apply":"Apply","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Ontwikkeld door {{name}}"},"main-page":{"title":"Stadia+","ready-text":"De extentie is klaar. Je kan nu Stadia openen en beginnen spelen! 🎮","launch-button":"Stadia starten","help-button":"Help & FAQ","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Instellingen","language":"Taal","components":"Componenten","edit-components":"Componenten aanpassen"},"developer-page":{"title":"Ontwikkelaar","clear-cache-button":"Cache wissen","storage":"Opslag"},"component-page":{"title":"Componenten"}},"component":{"enabled":"Component {{name}} werd ingeschakeld.","disabled":"Component {{name}} werd uitgeschakeld."},"allow-windowed-mode":{"name":"Spelen in venster toestaan","button-label":{"windowed":"In venster","fullscreen":"Fullscreen"}},"clock":{"name":"Klok"},"force-codec":{"name":"Codec forceren","4k-tooltip":"Codec kan niet geforceerd worden wanneer je in 4K speelt"},"force-resolution":{"name":"Resolutie forceren","note":"Merk op: Deze waarde is de maximale resolutie dat Stadia zal proberen te halen. Dit zal niet werken als je computer deze resolutie niet kan afspelen of als de resolutie niet beschikbaar is voor de dataverbruik selectie."},"library-filter":{"name":"Bibliotheek Filter","recent":"Recent","alphabetical":"Alfabetisch","random":"Willekeurig","show-hidden":"Verborgen weergeven"},"network-monitor":{"name":"Netwerk Monitor","heading-visible":"Zichtbare Stats","button-label":"Monitor","toggle-button":{"show":"Show Network Monitor","hide":"Hide Network Monitor"},"stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"ratings":{"name":"Scores","source-name":"Metacritic"},"store-filter":{"name":"Filter bewaren"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Herlaad de pagina om je aanpassingen te zien.","hide-game":"Een spel werd verborgen.","show-game":"Een spel is niet langer verborgen."},"automatic":"Automatisch","vp9":"VP9","h264":"H264","apply":"Toepassen","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Desenvolvido por {{name}}"},"main-page":{"title":"Stadia+","ready-text":"A extensão está nos conformes! Inicie o Stadia e comece a jogar! 🎮","launch-button":"Abrir Stadia","help-button":"Ajuda & Perguntas Frequentas","discord":"Discord","reddit":"Reddit","github":"Github"},"settings-page":{"title":"Opções","language":"Idioma","components":"Componentes","edit-components":"Editar Componentes"},"developer-page":{"title":"Desenvolvedor","clear-cache-button":"Limpar Cache","storage":"Armazenamento"},"component-page":{"title":"Componentes"}},"component":{"enabled":"O componente {{name}} foi habilitado.","disabled":"O component {{name}} foi desabilitado."},"allow-windowed-mode":{"name":"Permitir modo janela","button-label":{"windowed":"Janela","fullscreen":"Tela Cheia"}},"clock":{"name":"Relógio"},"force-codec":{"name":"Forçar Codec","4k-tooltip":"A opção de forçar codec não está disponível ao rodar jogos em 4K"},"force-resolution":{"name":"Forçar Resolução","note":"Atenção: o valor selecionado é a resolução máxima que o Stadia tentará alcançar. Se o seu computador não for capaz de renderizar a resolução ou a opção não estiver disponível no plano de consumo de dados atual, a resolução não será aplicada."},"library-filter":{"name":"Biblioteca de Filtros","recent":"Recente","alphabetical":"Alfábetica","random":"Aleatório","show-hidden":"Mostrar ocultos"},"network-monitor":{"name":"Monitoramento de Rede","heading-visible":"Status Visíveis","button-label":"Monitorar","stats":{"time":"Time","resolution":"Resolution","fps":"FPS","latency":"Latency","codec":"Codec","traffic":"Traffic","current-traffic":"Current Traffic","average-traffic":"Average Traffic","packets-lost":"Packets Lost","average-packet-loss":"Average Packet Loss","jitter-buffer":"Jitter Buffer"}},"ratings":{"name":"Avaliação","source-name":"Metacritic"},"store-filter":{"name":"Filtro da Loja"},"ui-tab":{"name":"Aba Stadia+ UI","button-label":"Stadia+"},"popup-fix":{"name":"Popup Fix"},"snackbar":{"reload-to-update":"Recarregue a página para aplicar as mudanças.","hide-game":"O jogo foi oculto.","show-game":"O jogo não se encontra mais oculto."},"automatic":"Automático","vp9":"VP9","h264":"H264","apply":"Aplicar","4k":"4K","1440p":"1440p","1080p":"1080p"}')},function(e,t,n){window,e.exports=function(){return(n={},e.m=t=[function(e,t,n){"use strict";function i(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}var o;t.__esModule=!0,t.hasClassInTree=function(e,t){function n(e,t){return t&&e&&e.classList&&e.classList.contains(t)?e:null}return n(e,t)||function e(t,i){return t&&t!==document?n(t,i)?t:e(t.parentNode,i):null}(e,t)},t.ensureElementInView=function(e,t){var n=e.scrollTop+e.offsetTop,i=n+e.clientHeight,o=t.offsetTop,a=o+t.clientHeight;o<n?e.scrollTop-=n-o:i<a&&(e.scrollTop+=a-i)},t.putContent=function(e,t,n){var i=e.offsetHeight,o=e.getBoundingClientRect(),a=n?o.top:o.top-i,r=n?o.bottom:o.bottom+i;return a<=0?"below":r>=window.innerHeight?"above":n?t:"below"},t.debounce=function(e,t,n){var i;return void 0===t&&(t=100),void 0===n&&(n=!1),function(){for(var o=[],a=0;a<arguments.length;a++)o[a]=arguments[a];var r=self,s=n&&!i;clearTimeout(i),i=setTimeout((function(){i=null,n||e.apply(r,o)}),t),s&&e.apply(r,o)}},t.isValueInArrayOfObjects=function(e,t,n){if(!Array.isArray(e))return e[t]===n;for(var i=0,o=e;i<o.length;i++){var a=o[i];if(a&&a[t]&&a[t]===n)return!0}return!1},t.highlight=function(e,t,n){var i=e,o=new RegExp("("+t.trim()+")(?![^<]*>[^<>]*</)","i");if(!e.match(o))return e;var a=e.match(o).index,r=a+e.match(o)[0].toString().length,s=e.substring(a,r);return i.replace(o,'<mark class="'+n+'">'+s+"</mark>")},"function"!=typeof(o=window).CustomEvent&&(i.prototype=o.Event.prototype,o.CustomEvent=i)},function(e,t,n){"use strict";t.__esModule=!0;var i=(o.prototype.newOption=function(e){return{id:e.id?e.id:String(Math.floor(1e8*Math.random())),value:e.value?e.value:"",text:e.text?e.text:"",innerHTML:e.innerHTML?e.innerHTML:"",selected:!!e.selected&&e.selected,display:void 0===e.display||e.display,disabled:!!e.disabled&&e.disabled,placeholder:!!e.placeholder&&e.placeholder,class:e.class?e.class:void 0,data:e.data?e.data:{}}},o.prototype.add=function(e){this.data.push({id:String(Math.floor(1e8*Math.random())),value:e.value,text:e.text,innerHTML:"",selected:!1,display:!0,disabled:!1,placeholder:!1,class:void 0,data:{}})},o.prototype.parseSelectData=function(){this.data=[];for(var e=0,t=this.main.select.element.childNodes;e<t.length;e++){var n=t[e];if("OPTGROUP"===n.nodeName){for(var i={label:n.label,options:[]},o=0,a=n.childNodes;o<a.length;o++){var r=a[o];if("OPTION"===r.nodeName){var s=this.pullOptionData(r);i.options.push(s),s.placeholder&&""!==s.text.trim()&&(this.main.config.placeholderText=s.text)}}this.data.push(i)}else"OPTION"===n.nodeName&&(s=this.pullOptionData(n),this.data.push(s),s.placeholder&&""!==s.text.trim()&&(this.main.config.placeholderText=s.text))}},o.prototype.pullOptionData=function(e){return{id:!!e.dataset&&e.dataset.id||String(Math.floor(1e8*Math.random())),value:e.value,text:e.text,innerHTML:e.innerHTML,selected:e.selected,disabled:e.disabled,placeholder:"true"===e.dataset.placeholder,class:e.className,style:e.style.cssText,data:e.dataset}},o.prototype.setSelectedFromSelect=function(){if(this.main.config.isMultiple){for(var e=[],t=0,n=this.main.select.element.options;t<n.length;t++){var i=n[t];if(i.selected){var o=this.getObjectFromData(i.value,"value");o&&o.id&&e.push(o.id)}}this.setSelected(e,"id")}else{var a=this.main.select.element;if(-1!==a.selectedIndex){var r=a.options[a.selectedIndex].value;this.setSelected(r,"value")}}},o.prototype.setSelected=function(e,t){void 0===t&&(t="id");for(var n=0,i=this.data;n<i.length;n++){var o=i[n];if(o.hasOwnProperty("label")){if(o.hasOwnProperty("options")){var a=o.options;if(a)for(var r=0,s=a;r<s.length;r++){var c=s[r];c.placeholder||(c.selected=this.shouldBeSelected(c,e,t))}}}else o.selected=this.shouldBeSelected(o,e,t)}},o.prototype.shouldBeSelected=function(e,t,n){if(void 0===n&&(n="id"),Array.isArray(t))for(var i=0,o=t;i<o.length;i++){var a=o[i];if(n in e&&String(e[n])===String(a))return!0}else if(n in e&&String(e[n])===String(t))return!0;return!1},o.prototype.getSelected=function(){for(var e={text:"",placeholder:this.main.config.placeholderText},t=[],n=0,i=this.data;n<i.length;n++){var o=i[n];if(o.hasOwnProperty("label")){if(o.hasOwnProperty("options")){var a=o.options;if(a)for(var r=0,s=a;r<s.length;r++){var c=s[r];c.selected&&(this.main.config.isMultiple?t.push(c):e=c)}}}else o.selected&&(this.main.config.isMultiple?t.push(o):e=o)}return this.main.config.isMultiple?t:e},o.prototype.addToSelected=function(e,t){if(void 0===t&&(t="id"),this.main.config.isMultiple){var n=[],i=this.getSelected();if(Array.isArray(i))for(var o=0,a=i;o<a.length;o++){var r=a[o];n.push(r[t])}n.push(e),this.setSelected(n,t)}},o.prototype.removeFromSelected=function(e,t){if(void 0===t&&(t="id"),this.main.config.isMultiple){for(var n=[],i=0,o=this.getSelected();i<o.length;i++){var a=o[i];String(a[t])!==String(e)&&n.push(a[t])}this.setSelected(n,t)}},o.prototype.onDataChange=function(){this.main.onChange&&this.isOnChangeEnabled&&this.main.onChange(JSON.parse(JSON.stringify(this.getSelected())))},o.prototype.getObjectFromData=function(e,t){void 0===t&&(t="id");for(var n=0,i=this.data;n<i.length;n++){var o=i[n];if(t in o&&String(o[t])===String(e))return o;if(o.hasOwnProperty("options")){var a=o;if(a.options)for(var r=0,s=a.options;r<s.length;r++){var c=s[r];if(String(c[t])===String(e))return c}}}return null},o.prototype.search=function(e){if(""!==(this.searchValue=e).trim()){var t=this.main.config.searchFilter,n=this.data.slice(0);e=e.trim();var i=n.map((function(n){if(n.hasOwnProperty("options")){var i=n,o=[];if(i.options&&(o=i.options.filter((function(n){return t(n,e)}))),0!==o.length){var a=Object.assign({},i);return a.options=o,a}}return n.hasOwnProperty("text")&&t(n,e)?n:null}));this.filtered=i.filter((function(e){return e}))}else this.filtered=null},o);function o(e){this.contentOpen=!1,this.contentPosition="below",this.isOnChangeEnabled=!0,this.main=e.main,this.searchValue="",this.data=[],this.filtered=null,this.parseSelectData(),this.setSelectedFromSelect()}function a(e){return void 0!==e.text||(console.error("Data object option must have at least have a text value. Check object: "+JSON.stringify(e)),!1)}t.Data=i,t.validateData=function(e){if(!e)return console.error("Data must be an array of objects"),!1;for(var t=0,n=0,i=e;n<i.length;n++){var o=i[n];if(o.hasOwnProperty("label")){if(o.hasOwnProperty("options")){var r=o.options;if(r)for(var s=0,c=r;s<c.length;s++)a(c[s])||t++}}else a(o)||t++}return 0===t},t.validateOption=a},function(e,t,n){"use strict";t.__esModule=!0;var i=n(3),o=n(4),a=n(5),r=n(1),s=n(0),c=(l.prototype.validate=function(e){var t="string"==typeof e.select?document.querySelector(e.select):e.select;if(!t)throw new Error("Could not find select element");if("SELECT"!==t.tagName)throw new Error("Element isnt of type select");return t},l.prototype.selected=function(){if(this.config.isMultiple){for(var e=[],t=0,n=o=this.data.getSelected();t<n.length;t++){var i=n[t];e.push(i.value)}return e}var o;return(o=this.data.getSelected())?o.value:""},l.prototype.set=function(e,t,n,i){void 0===t&&(t="value"),void 0===n&&(n=!0),void 0===i&&(i=!0),this.config.isMultiple&&!Array.isArray(e)?this.data.addToSelected(e,t):this.data.setSelected(e,t),this.select.setValue(),this.data.onDataChange(),this.render(),n&&this.close()},l.prototype.setSelected=function(e,t,n,i){void 0===t&&(t="value"),void 0===n&&(n=!0),void 0===i&&(i=!0),this.set(e,t,n,i)},l.prototype.setData=function(e){if(r.validateData(e)){var t=JSON.parse(JSON.stringify(e)),n=this.data.getSelected();if(this.config.isAjax&&n)if(this.config.isMultiple)for(var i=0,o=n.reverse();i<o.length;i++){var a=o[i];t.unshift(a)}else t.unshift(this.data.getSelected()),t.unshift({text:"",placeholder:!0});this.select.create(t),this.data.parseSelectData(),this.data.setSelectedFromSelect()}else console.error("Validation problem on: #"+this.select.element.id)},l.prototype.addData=function(e){r.validateData([e])?(this.data.add(this.data.newOption(e)),this.select.create(this.data.data),this.data.parseSelectData(),this.data.setSelectedFromSelect(),this.render()):console.error("Validation problem on: #"+this.select.element.id)},l.prototype.open=function(){var e=this;if(this.config.isEnabled&&!this.data.contentOpen){if(this.beforeOpen&&this.beforeOpen(),this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.plus.classList.add("ss-cross"):this.slim.singleSelected&&(this.slim.singleSelected.arrowIcon.arrow.classList.remove("arrow-down"),this.slim.singleSelected.arrowIcon.arrow.classList.add("arrow-up")),this.slim[this.config.isMultiple?"multiSelected":"singleSelected"].container.classList.add("above"===this.data.contentPosition?this.config.openAbove:this.config.openBelow),this.config.addToBody){var t=this.slim.container.getBoundingClientRect();this.slim.content.style.top=t.top+t.height+window.scrollY+"px",this.slim.content.style.left=t.left+window.scrollX+"px",this.slim.content.style.width=t.width+"px"}if(this.slim.content.classList.add(this.config.open),"up"===this.config.showContent.toLowerCase()?this.moveContentAbove():"down"===this.config.showContent.toLowerCase()?this.moveContentBelow():"above"===s.putContent(this.slim.content,this.data.contentPosition,this.data.contentOpen)?this.moveContentAbove():this.moveContentBelow(),!this.config.isMultiple){var n=this.data.getSelected();if(n){var i=n.id,o=this.slim.list.querySelector('[data-id="'+i+'"]');o&&s.ensureElementInView(this.slim.list,o)}}setTimeout((function(){e.data.contentOpen=!0,e.config.searchFocus&&e.slim.search.input.focus(),e.afterOpen&&e.afterOpen()}),this.config.timeoutDelay)}},l.prototype.close=function(){var e=this;this.data.contentOpen&&(this.beforeClose&&this.beforeClose(),this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openAbove),this.slim.multiSelected.container.classList.remove(this.config.openBelow),this.slim.multiSelected.plus.classList.remove("ss-cross")):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openAbove),this.slim.singleSelected.container.classList.remove(this.config.openBelow),this.slim.singleSelected.arrowIcon.arrow.classList.add("arrow-down"),this.slim.singleSelected.arrowIcon.arrow.classList.remove("arrow-up")),this.slim.content.classList.remove(this.config.open),this.data.contentOpen=!1,this.search(""),setTimeout((function(){e.slim.content.removeAttribute("style"),e.data.contentPosition="below",e.config.isMultiple&&e.slim.multiSelected?(e.slim.multiSelected.container.classList.remove(e.config.openAbove),e.slim.multiSelected.container.classList.remove(e.config.openBelow)):e.slim.singleSelected&&(e.slim.singleSelected.container.classList.remove(e.config.openAbove),e.slim.singleSelected.container.classList.remove(e.config.openBelow)),e.slim.search.input.blur(),e.afterClose&&e.afterClose()}),this.config.timeoutDelay))},l.prototype.moveContentAbove=function(){var e=0;this.config.isMultiple&&this.slim.multiSelected?e=this.slim.multiSelected.container.offsetHeight:this.slim.singleSelected&&(e=this.slim.singleSelected.container.offsetHeight);var t=e+this.slim.content.offsetHeight-1;this.slim.content.style.margin="-"+t+"px 0 0 0",this.slim.content.style.height=t-e+1+"px",this.slim.content.style.transformOrigin="center bottom",this.data.contentPosition="above",this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openBelow),this.slim.multiSelected.container.classList.add(this.config.openAbove)):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openBelow),this.slim.singleSelected.container.classList.add(this.config.openAbove))},l.prototype.moveContentBelow=function(){this.data.contentPosition="below",this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openAbove),this.slim.multiSelected.container.classList.add(this.config.openBelow)):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openAbove),this.slim.singleSelected.container.classList.add(this.config.openBelow))},l.prototype.enable=function(){this.config.isEnabled=!0,this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.container.classList.remove(this.config.disabled):this.slim.singleSelected&&this.slim.singleSelected.container.classList.remove(this.config.disabled),this.select.triggerMutationObserver=!1,this.select.element.disabled=!1,this.slim.search.input.disabled=!1,this.select.triggerMutationObserver=!0},l.prototype.disable=function(){this.config.isEnabled=!1,this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.container.classList.add(this.config.disabled):this.slim.singleSelected&&this.slim.singleSelected.container.classList.add(this.config.disabled),this.select.triggerMutationObserver=!1,this.select.element.disabled=!0,this.slim.search.input.disabled=!0,this.select.triggerMutationObserver=!0},l.prototype.search=function(e){if(this.data.searchValue!==e)if(this.slim.search.input.value=e,this.config.isAjax){var t=this;this.config.isSearching=!0,this.render(),this.ajax&&this.ajax(e,(function(n){t.config.isSearching=!1,Array.isArray(n)?(n.unshift({text:"",placeholder:!0}),t.setData(n),t.data.search(e),t.render()):"string"==typeof n?t.slim.options(n):t.render()}))}else this.data.search(e),this.render()},l.prototype.setSearchText=function(e){this.config.searchText=e},l.prototype.render=function(){this.config.isMultiple?this.slim.values():(this.slim.placeholder(),this.slim.deselect()),this.slim.options()},l.prototype.destroy=function(e){void 0===e&&(e=null);var t=e?document.querySelector("."+e+".ss-main"):this.slim.container,n=e?document.querySelector("[data-ssid="+e+"]"):this.select.element;if(t&&n&&(n.style.display="",delete n.dataset.ssid,n.slim=null,t.parentElement&&t.parentElement.removeChild(t),this.config.addToBody)){var i=e?document.querySelector("."+e+".ss-content"):this.slim.content;if(!i)return;document.body.removeChild(i)}},l);function l(e){var t=this;this.ajax=null,this.addable=null,this.beforeOnChange=null,this.onChange=null,this.beforeOpen=null,this.afterOpen=null,this.beforeClose=null,this.afterClose=null;var n=this.validate(e);n.dataset.ssid&&this.destroy(n.dataset.ssid),e.ajax&&(this.ajax=e.ajax),e.addable&&(this.addable=e.addable),this.config=new i.Config({select:n,isAjax:!!e.ajax,showSearch:e.showSearch,searchPlaceholder:e.searchPlaceholder,searchText:e.searchText,searchingText:e.searchingText,searchFocus:e.searchFocus,searchHighlight:e.searchHighlight,searchFilter:e.searchFilter,closeOnSelect:e.closeOnSelect,showContent:e.showContent,placeholderText:e.placeholder,allowDeselect:e.allowDeselect,allowDeselectOption:e.allowDeselectOption,hideSelectedOption:e.hideSelectedOption,deselectLabel:e.deselectLabel,isEnabled:e.isEnabled,valuesUseText:e.valuesUseText,showOptionTooltips:e.showOptionTooltips,selectByGroup:e.selectByGroup,limit:e.limit,timeoutDelay:e.timeoutDelay,addToBody:e.addToBody}),this.select=new o.Select({select:n,main:this}),this.data=new r.Data({main:this}),this.slim=new a.Slim({main:this}),this.select.element.parentNode&&this.select.element.parentNode.insertBefore(this.slim.container,this.select.element.nextSibling),e.data?this.setData(e.data):this.render(),document.addEventListener("click",(function(e){e.target&&!s.hasClassInTree(e.target,t.config.id)&&t.close()})),"auto"===this.config.showContent&&window.addEventListener("scroll",s.debounce((function(e){t.data.contentOpen&&("above"===s.putContent(t.slim.content,t.data.contentPosition,t.data.contentOpen)?t.moveContentAbove():t.moveContentBelow())})),!1),e.beforeOnChange&&(this.beforeOnChange=e.beforeOnChange),e.onChange&&(this.onChange=e.onChange),e.beforeOpen&&(this.beforeOpen=e.beforeOpen),e.afterOpen&&(this.afterOpen=e.afterOpen),e.beforeClose&&(this.beforeClose=e.beforeClose),e.afterClose&&(this.afterClose=e.afterClose),this.config.isEnabled||this.disable()}t.default=c},function(e,t,n){"use strict";t.__esModule=!0;var i=(o.prototype.searchFilter=function(e,t){return-1!==e.text.toLowerCase().indexOf(t.toLowerCase())},o);function o(e){this.id="",this.isMultiple=!1,this.isAjax=!1,this.isSearching=!1,this.showSearch=!0,this.searchFocus=!0,this.searchHighlight=!1,this.closeOnSelect=!0,this.showContent="auto",this.searchPlaceholder="Search",this.searchText="No Results",this.searchingText="Searching...",this.placeholderText="Select Value",this.allowDeselect=!1,this.allowDeselectOption=!1,this.hideSelectedOption=!1,this.deselectLabel="x",this.isEnabled=!0,this.valuesUseText=!1,this.showOptionTooltips=!1,this.selectByGroup=!1,this.limit=0,this.timeoutDelay=200,this.addToBody=!1,this.main="ss-main",this.singleSelected="ss-single-selected",this.arrow="ss-arrow",this.multiSelected="ss-multi-selected",this.add="ss-add",this.plus="ss-plus",this.values="ss-values",this.value="ss-value",this.valueText="ss-value-text",this.valueDelete="ss-value-delete",this.content="ss-content",this.open="ss-open",this.openAbove="ss-open-above",this.openBelow="ss-open-below",this.search="ss-search",this.searchHighlighter="ss-search-highlight",this.addable="ss-addable",this.list="ss-list",this.optgroup="ss-optgroup",this.optgroupLabel="ss-optgroup-label",this.optgroupLabelSelectable="ss-optgroup-label-selectable",this.option="ss-option",this.optionSelected="ss-option-selected",this.highlighted="ss-highlighted",this.disabled="ss-disabled",this.hide="ss-hide",this.id="ss-"+Math.floor(1e5*Math.random()),this.style=e.select.style.cssText,this.class=e.select.className.split(" "),this.isMultiple=e.select.multiple,this.isAjax=e.isAjax,this.showSearch=!1!==e.showSearch,this.searchFocus=!1!==e.searchFocus,this.searchHighlight=!0===e.searchHighlight,this.closeOnSelect=!1!==e.closeOnSelect,e.showContent&&(this.showContent=e.showContent),this.isEnabled=!1!==e.isEnabled,e.searchPlaceholder&&(this.searchPlaceholder=e.searchPlaceholder),e.searchText&&(this.searchText=e.searchText),e.searchingText&&(this.searchingText=e.searchingText),e.placeholderText&&(this.placeholderText=e.placeholderText),this.allowDeselect=!0===e.allowDeselect,this.allowDeselectOption=!0===e.allowDeselectOption,this.hideSelectedOption=!0===e.hideSelectedOption,e.deselectLabel&&(this.deselectLabel=e.deselectLabel),e.valuesUseText&&(this.valuesUseText=e.valuesUseText),e.showOptionTooltips&&(this.showOptionTooltips=e.showOptionTooltips),e.selectByGroup&&(this.selectByGroup=e.selectByGroup),e.limit&&(this.limit=e.limit),e.searchFilter&&(this.searchFilter=e.searchFilter),null!=e.timeoutDelay&&(this.timeoutDelay=e.timeoutDelay),this.addToBody=!0===e.addToBody}t.Config=i},function(e,t,n){"use strict";t.__esModule=!0;var i=(o.prototype.setValue=function(){if(this.main.data.getSelected()){if(this.main.config.isMultiple)for(var e=this.main.data.getSelected(),t=0,n=this.element.options;t<n.length;t++){var i=n[t];i.selected=!1;for(var o=0,a=e;o<a.length;o++)a[o].value===i.value&&(i.selected=!0)}else e=this.main.data.getSelected(),this.element.value=e?e.value:"";this.main.data.isOnChangeEnabled=!1,this.element.dispatchEvent(new CustomEvent("change",{bubbles:!0})),this.main.data.isOnChangeEnabled=!0}},o.prototype.addAttributes=function(){this.element.tabIndex=-1,this.element.style.display="none",this.element.dataset.ssid=this.main.config.id},o.prototype.addEventListeners=function(){var e=this;this.element.addEventListener("change",(function(t){e.main.data.setSelectedFromSelect(),e.main.render()}))},o.prototype.addMutationObserver=function(){var e=this;this.main.config.isAjax||(this.mutationObserver=new MutationObserver((function(t){e.triggerMutationObserver&&(e.main.data.parseSelectData(),e.main.data.setSelectedFromSelect(),e.main.render(),t.forEach((function(t){"class"===t.attributeName&&e.main.slim.updateContainerDivClass(e.main.slim.container)})))})),this.observeMutationObserver())},o.prototype.observeMutationObserver=function(){this.mutationObserver&&this.mutationObserver.observe(this.element,{attributes:!0,childList:!0,characterData:!0})},o.prototype.disconnectMutationObserver=function(){this.mutationObserver&&this.mutationObserver.disconnect()},o.prototype.create=function(e){this.element.innerHTML="";for(var t=0,n=e;t<n.length;t++){var i=n[t];if(i.hasOwnProperty("options")){var o=i,a=document.createElement("optgroup");if(a.label=o.label,o.options)for(var r=0,s=o.options;r<s.length;r++){var c=s[r];a.appendChild(this.createOption(c))}this.element.appendChild(a)}else this.element.appendChild(this.createOption(i))}},o.prototype.createOption=function(e){var t=document.createElement("option");return t.value=e.value||e.text,t.innerHTML=e.innerHTML||e.text,e.selected&&(t.selected=e.selected),e.disabled&&(t.disabled=!0),e.placeholder&&t.setAttribute("data-placeholder","true"),e.class&&e.class.split(" ").forEach((function(e){t.classList.add(e)})),e.data&&"object"==typeof e.data&&Object.keys(e.data).forEach((function(n){t.setAttribute("data-"+n,e.data[n])})),t},o);function o(e){this.triggerMutationObserver=!0,this.element=e.select,this.main=e.main,this.element.disabled&&(this.main.config.isEnabled=!1),this.addAttributes(),this.addEventListeners(),this.mutationObserver=null,this.addMutationObserver(),this.element.slim=e.main}t.Select=i},function(e,t,n){"use strict";t.__esModule=!0;var i=n(0),o=n(1),a=(r.prototype.containerDiv=function(){var e=document.createElement("div");return e.style.cssText=this.main.config.style,this.updateContainerDivClass(e),e},r.prototype.updateContainerDivClass=function(e){this.main.config.class=this.main.select.element.className.split(" "),e.className="",e.classList.add(this.main.config.id),e.classList.add(this.main.config.main);for(var t=0,n=this.main.config.class;t<n.length;t++){var i=n[t];""!==i.trim()&&e.classList.add(i)}},r.prototype.singleSelectedDiv=function(){var e=this,t=document.createElement("div");t.classList.add(this.main.config.singleSelected);var n=document.createElement("span");n.classList.add("placeholder"),t.appendChild(n);var i=document.createElement("span");i.innerHTML=this.main.config.deselectLabel,i.classList.add("ss-deselect"),i.onclick=function(t){t.stopPropagation(),e.main.config.isEnabled&&e.main.set("")},t.appendChild(i);var o=document.createElement("span");o.classList.add(this.main.config.arrow);var a=document.createElement("span");return a.classList.add("arrow-down"),o.appendChild(a),t.appendChild(o),t.onclick=function(){e.main.config.isEnabled&&(e.main.data.contentOpen?e.main.close():e.main.open())},{container:t,placeholder:n,deselect:i,arrowIcon:{container:o,arrow:a}}},r.prototype.placeholder=function(){var e=this.main.data.getSelected();if(null===e||e&&e.placeholder){var t=document.createElement("span");t.classList.add(this.main.config.disabled),t.innerHTML=this.main.config.placeholderText,this.singleSelected&&(this.singleSelected.placeholder.innerHTML=t.outerHTML)}else{var n="";e&&(n=e.innerHTML&&!0!==this.main.config.valuesUseText?e.innerHTML:e.text),this.singleSelected&&(this.singleSelected.placeholder.innerHTML=e?n:"")}},r.prototype.deselect=function(){if(this.singleSelected){if(!this.main.config.allowDeselect)return void this.singleSelected.deselect.classList.add("ss-hide");""===this.main.selected()?this.singleSelected.deselect.classList.add("ss-hide"):this.singleSelected.deselect.classList.remove("ss-hide")}},r.prototype.multiSelectedDiv=function(){var e=this,t=document.createElement("div");t.classList.add(this.main.config.multiSelected);var n=document.createElement("div");n.classList.add(this.main.config.values),t.appendChild(n);var i=document.createElement("div");i.classList.add(this.main.config.add);var o=document.createElement("span");return o.classList.add(this.main.config.plus),o.onclick=function(t){e.main.data.contentOpen&&(e.main.close(),t.stopPropagation())},i.appendChild(o),t.appendChild(i),t.onclick=function(t){e.main.config.isEnabled&&(t.target.classList.contains(e.main.config.valueDelete)||(e.main.data.contentOpen?e.main.close():e.main.open()))},{container:t,values:n,add:i,plus:o}},r.prototype.values=function(){if(this.multiSelected){for(var e,t=this.multiSelected.values.childNodes,n=this.main.data.getSelected(),i=[],o=0,a=t;o<a.length;o++){var r=a[o];e=!0;for(var s=0,c=n;s<c.length;s++){var l=c[s];String(l.id)===String(r.dataset.id)&&(e=!1)}e&&i.push(r)}for(var p=0,u=i;p<u.length;p++){var d=u[p];d.classList.add("ss-out"),this.multiSelected.values.removeChild(d)}for(t=this.multiSelected.values.childNodes,l=0;l<n.length;l++){e=!1;for(var f=0,h=t;f<h.length;f++)r=h[f],String(n[l].id)===String(r.dataset.id)&&(e=!0);e||(0!==t.length&&HTMLElement.prototype.insertAdjacentElement?0===l?this.multiSelected.values.insertBefore(this.valueDiv(n[l]),t[l]):t[l-1].insertAdjacentElement("afterend",this.valueDiv(n[l])):this.multiSelected.values.appendChild(this.valueDiv(n[l])))}if(0===n.length){var m=document.createElement("span");m.classList.add(this.main.config.disabled),m.innerHTML=this.main.config.placeholderText,this.multiSelected.values.innerHTML=m.outerHTML}}},r.prototype.valueDiv=function(e){var t=this,n=document.createElement("div");n.classList.add(this.main.config.value),n.dataset.id=e.id;var i=document.createElement("span");i.classList.add(this.main.config.valueText),i.innerHTML=e.innerHTML&&!0!==this.main.config.valuesUseText?e.innerHTML:e.text,n.appendChild(i);var o=document.createElement("span");return o.classList.add(this.main.config.valueDelete),o.innerHTML=this.main.config.deselectLabel,o.onclick=function(n){n.preventDefault(),n.stopPropagation();var i=!1;if(t.main.config.isEnabled){if(t.main.beforeOnChange||(i=!0),t.main.beforeOnChange){for(var o=t.main.data.getSelected(),a=JSON.parse(JSON.stringify(o)),r=0;r<a.length;r++)a[r].id===e.id&&a.splice(r,1);!1!==t.main.beforeOnChange(a)&&(i=!0)}i&&(t.main.data.removeFromSelected(e.id,"id"),t.main.render(),t.main.select.setValue(),t.main.data.onDataChange())}},n.appendChild(o),n},r.prototype.contentDiv=function(){var e=document.createElement("div");return e.classList.add(this.main.config.content),e},r.prototype.searchDiv=function(){var e=this,t=document.createElement("div"),n=document.createElement("input"),i=document.createElement("div");t.classList.add(this.main.config.search);var a={container:t,input:n};return this.main.config.showSearch||(t.classList.add(this.main.config.hide),n.readOnly=!0),n.type="search",n.placeholder=this.main.config.searchPlaceholder,n.tabIndex=0,n.setAttribute("aria-label",this.main.config.searchPlaceholder),n.setAttribute("autocapitalize","off"),n.setAttribute("autocomplete","off"),n.setAttribute("autocorrect","off"),n.onclick=function(t){setTimeout((function(){""===t.target.value&&e.main.search("")}),10)},n.onkeydown=function(t){"ArrowUp"===t.key?(e.main.open(),e.highlightUp(),t.preventDefault()):"ArrowDown"===t.key?(e.main.open(),e.highlightDown(),t.preventDefault()):"Tab"===t.key?e.main.data.contentOpen?e.main.close():setTimeout((function(){e.main.close()}),e.main.config.timeoutDelay):"Enter"===t.key&&t.preventDefault()},n.onkeyup=function(t){var o=t.target;if("Enter"===t.key){if(e.main.addable&&t.ctrlKey)return i.click(),t.preventDefault(),void t.stopPropagation();var a=e.list.querySelector("."+e.main.config.highlighted);a&&a.click()}else"ArrowUp"===t.key||"ArrowDown"===t.key||("Escape"===t.key?e.main.close():e.main.config.showSearch&&e.main.data.contentOpen?e.main.search(o.value):n.value="");t.preventDefault(),t.stopPropagation()},n.onfocus=function(){e.main.open()},t.appendChild(n),this.main.addable&&(i.classList.add(this.main.config.addable),i.innerHTML="+",i.onclick=function(t){if(e.main.addable){t.preventDefault(),t.stopPropagation();var n=e.search.input.value;if(""===n.trim())return void e.search.input.focus();var i=e.main.addable(n),a="";if(!i)return;"object"==typeof i?o.validateOption(i)&&(e.main.addData(i),a=i.value?i.value:i.text):(e.main.addData(e.main.data.newOption({text:i,value:i})),a=i),e.main.search(""),setTimeout((function(){e.main.set(a,"value",!1,!1)}),100),e.main.config.closeOnSelect&&setTimeout((function(){e.main.close()}),100)}},t.appendChild(i),a.addable=i),a},r.prototype.highlightUp=function(){var e=this.list.querySelector("."+this.main.config.highlighted),t=null;if(e)for(t=e.previousSibling;null!==t&&t.classList.contains(this.main.config.disabled);)t=t.previousSibling;else{var n=this.list.querySelectorAll("."+this.main.config.option+":not(."+this.main.config.disabled+")");t=n[n.length-1]}if(t&&t.classList.contains(this.main.config.optgroupLabel)&&(t=null),null===t){var o=e.parentNode;if(o.classList.contains(this.main.config.optgroup)&&o.previousSibling){var a=o.previousSibling.querySelectorAll("."+this.main.config.option+":not(."+this.main.config.disabled+")");a.length&&(t=a[a.length-1])}}t&&(e&&e.classList.remove(this.main.config.highlighted),t.classList.add(this.main.config.highlighted),i.ensureElementInView(this.list,t))},r.prototype.highlightDown=function(){var e=this.list.querySelector("."+this.main.config.highlighted),t=null;if(e)for(t=e.nextSibling;null!==t&&t.classList.contains(this.main.config.disabled);)t=t.nextSibling;else t=this.list.querySelector("."+this.main.config.option+":not(."+this.main.config.disabled+")");if(null===t&&null!==e){var n=e.parentNode;n.classList.contains(this.main.config.optgroup)&&n.nextSibling&&(t=n.nextSibling.querySelector("."+this.main.config.option+":not(."+this.main.config.disabled+")"))}t&&(e&&e.classList.remove(this.main.config.highlighted),t.classList.add(this.main.config.highlighted),i.ensureElementInView(this.list,t))},r.prototype.listDiv=function(){var e=document.createElement("div");return e.classList.add(this.main.config.list),e},r.prototype.options=function(e){void 0===e&&(e="");var t,n=this.main.data.filtered||this.main.data.data;if((this.list.innerHTML="")!==e)return(t=document.createElement("div")).classList.add(this.main.config.option),t.classList.add(this.main.config.disabled),t.innerHTML=e,void this.list.appendChild(t);if(this.main.config.isAjax&&this.main.config.isSearching)return(t=document.createElement("div")).classList.add(this.main.config.option),t.classList.add(this.main.config.disabled),t.innerHTML=this.main.config.searchingText,void this.list.appendChild(t);if(0===n.length){var i=document.createElement("div");return i.classList.add(this.main.config.option),i.classList.add(this.main.config.disabled),i.innerHTML=this.main.config.searchText,void this.list.appendChild(i)}for(var o=function(e){if(e.hasOwnProperty("label")){var t=e,n=document.createElement("div");n.classList.add(a.main.config.optgroup);var i=document.createElement("div");i.classList.add(a.main.config.optgroupLabel),a.main.config.selectByGroup&&a.main.config.isMultiple&&i.classList.add(a.main.config.optgroupLabelSelectable),i.innerHTML=t.label,n.appendChild(i);var o=t.options;if(o){for(var r=0,s=o;r<s.length;r++){var c=s[r];n.appendChild(a.option(c))}if(a.main.config.selectByGroup&&a.main.config.isMultiple){var l=a;i.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation();for(var t=0,i=n.children;t<i.length;t++){var o=i[t];-1!==o.className.indexOf(l.main.config.option)&&o.click()}}))}}a.list.appendChild(n)}else a.list.appendChild(a.option(e))},a=this,r=0,s=n;r<s.length;r++)o(s[r])},r.prototype.option=function(e){if(e.placeholder){var t=document.createElement("div");return t.classList.add(this.main.config.option),t.classList.add(this.main.config.hide),t}var n=document.createElement("div");n.classList.add(this.main.config.option),e.class&&e.class.split(" ").forEach((function(e){n.classList.add(e)})),e.style&&(n.style.cssText=e.style);var o=this.main.data.getSelected();n.dataset.id=e.id,this.main.config.searchHighlight&&this.main.slim&&e.innerHTML&&""!==this.main.slim.search.input.value.trim()?n.innerHTML=i.highlight(e.innerHTML,this.main.slim.search.input.value,this.main.config.searchHighlighter):e.innerHTML&&(n.innerHTML=e.innerHTML),this.main.config.showOptionTooltips&&n.textContent&&n.setAttribute("title",n.textContent);var a=this;n.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation();var n=this.dataset.id;if(!0===e.selected&&a.main.config.allowDeselectOption){var i=!1;if(a.main.beforeOnChange&&a.main.config.isMultiple||(i=!0),a.main.beforeOnChange&&a.main.config.isMultiple){for(var r=a.main.data.getSelected(),s=JSON.parse(JSON.stringify(r)),c=0;c<s.length;c++)s[c].id===n&&s.splice(c,1);!1!==a.main.beforeOnChange(s)&&(i=!0)}i&&(a.main.config.isMultiple?(a.main.data.removeFromSelected(n,"id"),a.main.render(),a.main.select.setValue(),a.main.data.onDataChange()):a.main.set(""))}else{if(e.disabled||e.selected)return;if(a.main.config.limit&&Array.isArray(o)&&a.main.config.limit<=o.length)return;if(a.main.beforeOnChange){var l=void 0,p=JSON.parse(JSON.stringify(a.main.data.getObjectFromData(n)));p.selected=!0,a.main.config.isMultiple?(l=JSON.parse(JSON.stringify(o))).push(p):l=JSON.parse(JSON.stringify(p)),!1!==a.main.beforeOnChange(l)&&a.main.set(n,"id",a.main.config.closeOnSelect)}else a.main.set(n,"id",a.main.config.closeOnSelect)}}));var r=o&&i.isValueInArrayOfObjects(o,"id",e.id);return(e.disabled||r)&&(n.onclick=null,a.main.config.allowDeselectOption||n.classList.add(this.main.config.disabled),a.main.config.hideSelectedOption&&n.classList.add(this.main.config.hide)),r?n.classList.add(this.main.config.optionSelected):n.classList.remove(this.main.config.optionSelected),n},r);function r(e){this.main=e.main,this.container=this.containerDiv(),this.content=this.contentDiv(),this.search=this.searchDiv(),this.list=this.listDiv(),this.options(),this.singleSelected=null,this.multiSelected=null,this.main.config.isMultiple?(this.multiSelected=this.multiSelectedDiv(),this.multiSelected&&this.container.appendChild(this.multiSelected.container)):(this.singleSelected=this.singleSelectedDiv(),this.container.appendChild(this.singleSelected.container)),this.main.config.addToBody?(this.content.classList.add(this.main.config.id),document.body.appendChild(this.content)):this.container.appendChild(this.content),this.content.appendChild(this.search.container),this.content.appendChild(this.list)}t.Slim=a}],e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(i,o,function(e){return t[e]}.bind(null,o));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},e.p="",e(e.s=2)).default;function e(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var t,n}()},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var i=n(1),o=function(){function e(){this.components=[]}return e.prototype.register=function(e){this.components.push(e)},e.prototype.unregister=function(e){this.components.filter((function(t){return t.id!==e.id}))},e.prototype.start=function(){var e=this;i.c.COMPONENTS.get((function(t){var n=t.components;void 0===n&&(n={});for(var o=0,a=e.components;o<a.length;o++){var r=a[o];void 0===n[r.tag]&&(n[r.tag]={}),void 0===n[r.tag].enabled&&(n[r.tag].enabled=!0),r.enabled=n[r.tag].enabled,r.enabled&&!r.active&&r.load()}i.c.COMPONENTS.set(n),e.startTimer()}))},e.prototype.stop=function(){this.components.forEach((function(e){e.active&&e.unload()})),this.stopTimer()},e.prototype.startTimer=function(){var e=this;this.timer=setInterval((function(){e.components.forEach((function(e){e.active&&e.onUpdate()}))}),1e3)},e.prototype.stopTimer=function(){clearInterval(this.timer)},e}()},function(e,t,n){var i=n(3),o=n(72);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){var i=n(3),o=n(74);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){var i=n(3),o=n(76);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){var i=n(3),o=n(78);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){var i=n(3),o=n(80);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){var i=n(3),o=n(82);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){var i=n(3),o=n(84);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){var i=n(3),o=n(86);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){var i=n(3),o=n(88);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){"use strict";(function(e,n){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var i=Object.freeze({});function o(e){return null==e}function a(e){return null!=e}function r(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return null!==e&&"object"==typeof e}var l=Object.prototype.toString;function p(e){return"[object Object]"===l.call(e)}function u(e){return"[object RegExp]"===l.call(e)}function d(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function f(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function h(e){return null==e?"":Array.isArray(e)||p(e)&&e.toString===l?JSON.stringify(e,null,2):String(e)}function m(e){var t=parseFloat(e);return isNaN(t)?e:t}function g(e,t){for(var n=Object.create(null),i=e.split(","),o=0;o<i.length;o++)n[i[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}g("slot,component",!0);var v=g("key,ref,slot,slot-scope,is");function b(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var y=Object.prototype.hasOwnProperty;function w(e,t){return y.call(e,t)}function _(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var k=/-(\w)/g,x=_((function(e){return e.replace(k,(function(e,t){return t?t.toUpperCase():""}))})),S=_((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),C=/\B([A-Z])/g,O=_((function(e){return e.replace(C,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function T(e,t){t=t||0;for(var n=e.length-t,i=new Array(n);n--;)i[n]=e[n+t];return i}function L(e,t){for(var n in t)e[n]=t[n];return e}function E(e){for(var t={},n=0;n<e.length;n++)e[n]&&L(t,e[n]);return t}function M(e,t,n){}var j=function(e,t,n){return!1},$=function(e){return e};function P(e,t){if(e===t)return!0;var n=c(e),i=c(t);if(!n||!i)return!n&&!i&&String(e)===String(t);try{var o=Array.isArray(e),a=Array.isArray(t);if(o&&a)return e.length===t.length&&e.every((function(e,n){return P(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||a)return!1;var r=Object.keys(e),s=Object.keys(t);return r.length===s.length&&r.every((function(n){return P(e[n],t[n])}))}catch(e){return!1}}function D(e,t){for(var n=0;n<e.length;n++)if(P(e[n],t))return n;return-1}function I(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var R=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:j,isReservedAttr:j,isUnknownElement:j,getTagNamespace:M,parsePlatformTagName:$,mustUseProp:j,async:!0,_lifecycleHooks:N},z=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})}var B=new RegExp("[^"+z.source+".$_\\d]");var U,V="__proto__"in{},q="undefined"!=typeof window,J="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=J&&WXEnvironment.platform.toLowerCase(),G=q&&window.navigator.userAgent.toLowerCase(),W=G&&/msie|trident/.test(G),Q=G&&G.indexOf("msie 9.0")>0,X=G&&G.indexOf("edge/")>0,Z=(G&&G.indexOf("android"),G&&/iphone|ipad|ipod|ios/.test(G)||"ios"===K),Y=(G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G),G&&G.match(/firefox\/(\d+)/)),ee={}.watch,te=!1;if(q)try{var ne={};Object.defineProperty(ne,"passive",{get:function(){te=!0}}),window.addEventListener("test-passive",null,ne)}catch(e){}var ie=function(){return void 0===U&&(U=!q&&!J&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),U},oe=q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ae(e){return"function"==typeof e&&/native code/.test(e.toString())}var re,se="undefined"!=typeof Symbol&&ae(Symbol)&&"undefined"!=typeof Reflect&&ae(Reflect.ownKeys);re="undefined"!=typeof Set&&ae(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ce=M,le=0,pe=function(){this.id=le++,this.subs=[]};pe.prototype.addSub=function(e){this.subs.push(e)},pe.prototype.removeSub=function(e){b(this.subs,e)},pe.prototype.depend=function(){pe.target&&pe.target.addDep(this)},pe.prototype.notify=function(){var e=this.subs.slice();for(var t=0,n=e.length;t<n;t++)e[t].update()},pe.target=null;var ue=[];function de(e){ue.push(e),pe.target=e}function fe(){ue.pop(),pe.target=ue[ue.length-1]}var he=function(e,t,n,i,o,a,r,s){this.tag=e,this.data=t,this.children=n,this.text=i,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},me={child:{configurable:!0}};me.child.get=function(){return this.componentInstance},Object.defineProperties(he.prototype,me);var ge=function(e){void 0===e&&(e="");var t=new he;return t.text=e,t.isComment=!0,t};function ve(e){return new he(void 0,void 0,void 0,String(e))}function be(e){var t=new he(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var ye=Array.prototype,we=Object.create(ye);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=ye[e];H(we,e,(function(){for(var n=[],i=arguments.length;i--;)n[i]=arguments[i];var o,a=t.apply(this,n),r=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&r.observeArray(o),r.dep.notify(),a}))}));var _e=Object.getOwnPropertyNames(we),ke=!0;function xe(e){ke=e}var Se=function(e){this.value=e,this.dep=new pe,this.vmCount=0,H(e,"__ob__",this),Array.isArray(e)?(V?function(e,t){e.__proto__=t}(e,we):function(e,t,n){for(var i=0,o=n.length;i<o;i++){var a=n[i];H(e,a,t[a])}}(e,we,_e),this.observeArray(e)):this.walk(e)};function Ce(e,t){var n;if(c(e)&&!(e instanceof he))return w(e,"__ob__")&&e.__ob__ instanceof Se?n=e.__ob__:ke&&!ie()&&(Array.isArray(e)||p(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Se(e)),t&&n&&n.vmCount++,n}function Oe(e,t,n,i,o){var a=new pe,r=Object.getOwnPropertyDescriptor(e,t);if(!r||!1!==r.configurable){var s=r&&r.get,c=r&&r.set;s&&!c||2!==arguments.length||(n=e[t]);var l=!o&&Ce(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return pe.target&&(a.depend(),l&&(l.dep.depend(),Array.isArray(t)&&Le(t))),t},set:function(t){var i=s?s.call(e):n;t===i||t!=t&&i!=i||s&&!c||(c?c.call(e,t):n=t,l=!o&&Ce(t),a.notify())}})}}function Ae(e,t,n){if(Array.isArray(e)&&d(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var i=e.__ob__;return e._isVue||i&&i.vmCount?n:i?(Oe(i.value,t,n),i.dep.notify(),n):(e[t]=n,n)}function Te(e,t){if(Array.isArray(e)&&d(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||w(e,t)&&(delete e[t],n&&n.dep.notify())}}function Le(e){for(var t=void 0,n=0,i=e.length;n<i;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Le(t)}Se.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Oe(e,t[n])},Se.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Ce(e[t])};var Ee=F.optionMergeStrategies;function Me(e,t){if(!t)return e;for(var n,i,o,a=se?Reflect.ownKeys(t):Object.keys(t),r=0;r<a.length;r++)"__ob__"!==(n=a[r])&&(i=e[n],o=t[n],w(e,n)?i!==o&&p(i)&&p(o)&&Me(i,o):Ae(e,n,o));return e}function je(e,t,n){return n?function(){var i="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return i?Me(i,o):o}:t?e?function(){return Me("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function $e(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Pe(e,t,n,i){var o=Object.create(e||null);return t?L(o,t):o}Ee.data=function(e,t,n){return n?je(e,t,n):t&&"function"!=typeof t?e:je(e,t)},N.forEach((function(e){Ee[e]=$e})),R.forEach((function(e){Ee[e+"s"]=Pe})),Ee.watch=function(e,t,n,i){if(e===ee&&(e=void 0),t===ee&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var o={};for(var a in L(o,e),t){var r=o[a],s=t[a];r&&!Array.isArray(r)&&(r=[r]),o[a]=r?r.concat(s):Array.isArray(s)?s:[s]}return o},Ee.props=Ee.methods=Ee.inject=Ee.computed=function(e,t,n,i){if(!e)return t;var o=Object.create(null);return L(o,e),t&&L(o,t),o},Ee.provide=je;var De=function(e,t){return void 0===t?e:t};function Ie(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var i,o,a={};if(Array.isArray(n))for(i=n.length;i--;)"string"==typeof(o=n[i])&&(a[x(o)]={type:null});else if(p(n))for(var r in n)o=n[r],a[x(r)]=p(o)?o:{type:o};else 0;e.props=a}}(t),function(e,t){var n=e.inject;if(n){var i=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)i[n[o]]={from:n[o]};else if(p(n))for(var a in n){var r=n[a];i[a]=p(r)?L({from:a},r):{from:r}}else 0}}(t),function(e){var t=e.directives;if(t)for(var n in t){var i=t[n];"function"==typeof i&&(t[n]={bind:i,update:i})}}(t),!t._base&&(t.extends&&(e=Ie(e,t.extends,n)),t.mixins))for(var i=0,o=t.mixins.length;i<o;i++)e=Ie(e,t.mixins[i],n);var a,r={};for(a in e)s(a);for(a in t)w(e,a)||s(a);function s(i){var o=Ee[i]||De;r[i]=o(e[i],t[i],n,i)}return r}function Re(e,t,n,i){if("string"==typeof n){var o=e[t];if(w(o,n))return o[n];var a=x(n);if(w(o,a))return o[a];var r=S(a);return w(o,r)?o[r]:o[n]||o[a]||o[r]}}function Ne(e,t,n,i){var o=t[e],a=!w(n,e),r=n[e],s=He(Boolean,o.type);if(s>-1)if(a&&!w(o,"default"))r=!1;else if(""===r||r===O(e)){var c=He(String,o.type);(c<0||s<c)&&(r=!0)}if(void 0===r){r=function(e,t,n){if(!w(t,"default"))return;var i=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof i&&"Function"!==Fe(t.type)?i.call(e):i}(i,o,e);var l=ke;xe(!0),Ce(r),xe(l)}return r}function Fe(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function ze(e,t){return Fe(e)===Fe(t)}function He(e,t){if(!Array.isArray(t))return ze(t,e)?0:-1;for(var n=0,i=t.length;n<i;n++)if(ze(t[n],e))return n;return-1}function Be(e,t,n){de();try{if(t)for(var i=t;i=i.$parent;){var o=i.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(i,e,t,n))return}catch(e){Ve(e,i,"errorCaptured hook")}}Ve(e,t,n)}finally{fe()}}function Ue(e,t,n,i,o){var a;try{(a=n?e.apply(t,n):e.call(t))&&!a._isVue&&f(a)&&!a._handled&&(a.catch((function(e){return Be(e,i,o+" (Promise/async)")})),a._handled=!0)}catch(e){Be(e,i,o)}return a}function Ve(e,t,n){if(F.errorHandler)try{return F.errorHandler.call(null,e,t,n)}catch(t){t!==e&&qe(t,null,"config.errorHandler")}qe(e,t,n)}function qe(e,t,n){if(!q&&!J||"undefined"==typeof console)throw e;console.error(e)}var Je,Ke=!1,Ge=[],We=!1;function Qe(){We=!1;var e=Ge.slice(0);Ge.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ae(Promise)){var Xe=Promise.resolve();Je=function(){Xe.then(Qe),Z&&setTimeout(M)},Ke=!0}else if(W||"undefined"==typeof MutationObserver||!ae(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Je=void 0!==n&&ae(n)?function(){n(Qe)}:function(){setTimeout(Qe,0)};else{var Ze=1,Ye=new MutationObserver(Qe),et=document.createTextNode(String(Ze));Ye.observe(et,{characterData:!0}),Je=function(){Ze=(Ze+1)%2,et.data=String(Ze)},Ke=!0}function tt(e,t){var n;if(Ge.push((function(){if(e)try{e.call(t)}catch(e){Be(e,t,"nextTick")}else n&&n(t)})),We||(We=!0,Je()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var nt=new re;function it(e){!function e(t,n){var i,o,a=Array.isArray(t);if(!a&&!c(t)||Object.isFrozen(t)||t instanceof he)return;if(t.__ob__){var r=t.__ob__.dep.id;if(n.has(r))return;n.add(r)}if(a)for(i=t.length;i--;)e(t[i],n);else for(o=Object.keys(t),i=o.length;i--;)e(t[o[i]],n)}(e,nt),nt.clear()}var ot=_((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),i="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=i?e.slice(1):e,once:n,capture:i,passive:t}}));function at(e,t){function n(){var e=arguments,i=n.fns;if(!Array.isArray(i))return Ue(i,null,arguments,t,"v-on handler");for(var o=i.slice(),a=0;a<o.length;a++)Ue(o[a],null,e,t,"v-on handler")}return n.fns=e,n}function rt(e,t,n,i,a,s){var c,l,p,u;for(c in e)l=e[c],p=t[c],u=ot(c),o(l)||(o(p)?(o(l.fns)&&(l=e[c]=at(l,s)),r(u.once)&&(l=e[c]=a(u.name,l,u.capture)),n(u.name,l,u.capture,u.passive,u.params)):l!==p&&(p.fns=l,e[c]=p));for(c in t)o(e[c])&&i((u=ot(c)).name,t[c],u.capture)}function st(e,t,n){var i;e instanceof he&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function c(){n.apply(this,arguments),b(i.fns,c)}o(s)?i=at([c]):a(s.fns)&&r(s.merged)?(i=s).fns.push(c):i=at([s,c]),i.merged=!0,e[t]=i}function ct(e,t,n,i,o){if(a(t)){if(w(t,n))return e[n]=t[n],o||delete t[n],!0;if(w(t,i))return e[n]=t[i],o||delete t[i],!0}return!1}function lt(e){return s(e)?[ve(e)]:Array.isArray(e)?function e(t,n){var i,c,l,p,u=[];for(i=0;i<t.length;i++)o(c=t[i])||"boolean"==typeof c||(l=u.length-1,p=u[l],Array.isArray(c)?c.length>0&&(pt((c=e(c,(n||"")+"_"+i))[0])&&pt(p)&&(u[l]=ve(p.text+c[0].text),c.shift()),u.push.apply(u,c)):s(c)?pt(p)?u[l]=ve(p.text+c):""!==c&&u.push(ve(c)):pt(c)&&pt(p)?u[l]=ve(p.text+c.text):(r(t._isVList)&&a(c.tag)&&o(c.key)&&a(n)&&(c.key="__vlist"+n+"_"+i+"__"),u.push(c)));return u}(e):void 0}function pt(e){return a(e)&&a(e.text)&&!1===e.isComment}function ut(e,t){if(e){for(var n=Object.create(null),i=se?Reflect.ownKeys(e):Object.keys(e),o=0;o<i.length;o++){var a=i[o];if("__ob__"!==a){for(var r=e[a].from,s=t;s;){if(s._provided&&w(s._provided,r)){n[a]=s._provided[r];break}s=s.$parent}if(!s)if("default"in e[a]){var c=e[a].default;n[a]="function"==typeof c?c.call(t):c}else 0}}return n}}function dt(e,t){if(!e||!e.length)return{};for(var n={},i=0,o=e.length;i<o;i++){var a=e[i],r=a.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,a.context!==t&&a.fnContext!==t||!r||null==r.slot)(n.default||(n.default=[])).push(a);else{var s=r.slot,c=n[s]||(n[s]=[]);"template"===a.tag?c.push.apply(c,a.children||[]):c.push(a)}}for(var l in n)n[l].every(ft)&&delete n[l];return n}function ft(e){return e.isComment&&!e.asyncFactory||" "===e.text}function ht(e,t,n){var o,a=Object.keys(t).length>0,r=e?!!e.$stable:!a,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(r&&n&&n!==i&&s===n.$key&&!a&&!n.$hasNormal)return n;for(var c in o={},e)e[c]&&"$"!==c[0]&&(o[c]=mt(t,c,e[c]))}else o={};for(var l in t)l in o||(o[l]=gt(t,l));return e&&Object.isExtensible(e)&&(e._normalized=o),H(o,"$stable",r),H(o,"$key",s),H(o,"$hasNormal",a),o}function mt(e,t,n){var i=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:lt(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:i,enumerable:!0,configurable:!0}),i}function gt(e,t){return function(){return e[t]}}function vt(e,t){var n,i,o,r,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),i=0,o=e.length;i<o;i++)n[i]=t(e[i],i);else if("number"==typeof e)for(n=new Array(e),i=0;i<e;i++)n[i]=t(i+1,i);else if(c(e))if(se&&e[Symbol.iterator]){n=[];for(var l=e[Symbol.iterator](),p=l.next();!p.done;)n.push(t(p.value,n.length)),p=l.next()}else for(r=Object.keys(e),n=new Array(r.length),i=0,o=r.length;i<o;i++)s=r[i],n[i]=t(e[s],s,i);return a(n)||(n=[]),n._isVList=!0,n}function bt(e,t,n,i){var o,a=this.$scopedSlots[e];a?(n=n||{},i&&(n=L(L({},i),n)),o=a(n)||t):o=this.$slots[e]||t;var r=n&&n.slot;return r?this.$createElement("template",{slot:r},o):o}function yt(e){return Re(this.$options,"filters",e)||$}function wt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function _t(e,t,n,i,o){var a=F.keyCodes[t]||n;return o&&i&&!F.keyCodes[t]?wt(o,i):a?wt(a,e):i?O(i)!==t:void 0}function kt(e,t,n,i,o){if(n)if(c(n)){var a;Array.isArray(n)&&(n=E(n));var r=function(r){if("class"===r||"style"===r||v(r))a=e;else{var s=e.attrs&&e.attrs.type;a=i||F.mustUseProp(t,s,r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=x(r),l=O(r);c in a||l in a||(a[r]=n[r],o&&((e.on||(e.on={}))["update:"+r]=function(e){n[r]=e}))};for(var s in n)r(s)}else;return e}function xt(e,t){var n=this._staticTrees||(this._staticTrees=[]),i=n[e];return i&&!t||Ct(i=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),i}function St(e,t,n){return Ct(e,"__once__"+t+(n?"_"+n:""),!0),e}function Ct(e,t,n){if(Array.isArray(e))for(var i=0;i<e.length;i++)e[i]&&"string"!=typeof e[i]&&Ot(e[i],t+"_"+i,n);else Ot(e,t,n)}function Ot(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function At(e,t){if(t)if(p(t)){var n=e.on=e.on?L({},e.on):{};for(var i in t){var o=n[i],a=t[i];n[i]=o?[].concat(o,a):a}}else;return e}function Tt(e,t,n,i){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var a=e[o];Array.isArray(a)?Tt(a,t,n):a&&(a.proxy&&(a.fn.proxy=!0),t[a.key]=a.fn)}return i&&(t.$key=i),t}function Lt(e,t){for(var n=0;n<t.length;n+=2){var i=t[n];"string"==typeof i&&i&&(e[t[n]]=t[n+1])}return e}function Et(e,t){return"string"==typeof e?t+e:e}function Mt(e){e._o=St,e._n=m,e._s=h,e._l=vt,e._t=bt,e._q=P,e._i=D,e._m=xt,e._f=yt,e._k=_t,e._b=kt,e._v=ve,e._e=ge,e._u=Tt,e._g=At,e._d=Lt,e._p=Et}function jt(e,t,n,o,a){var s,c=this,l=a.options;w(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var p=r(l._compiled),u=!p;this.data=e,this.props=t,this.children=n,this.parent=o,this.listeners=e.on||i,this.injections=ut(l.inject,o),this.slots=function(){return c.$slots||ht(e.scopedSlots,c.$slots=dt(n,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ht(e.scopedSlots,this.slots())}}),p&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=ht(e.scopedSlots,this.$slots)),l._scopeId?this._c=function(e,t,n,i){var a=Ft(s,e,t,n,i,u);return a&&!Array.isArray(a)&&(a.fnScopeId=l._scopeId,a.fnContext=o),a}:this._c=function(e,t,n,i){return Ft(s,e,t,n,i,u)}}function $t(e,t,n,i,o){var a=be(e);return a.fnContext=n,a.fnOptions=i,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function Pt(e,t){for(var n in t)e[x(n)]=t[n]}Mt(jt.prototype);var Dt={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;Dt.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},i=e.data.inlineTemplate;a(i)&&(n.render=i.render,n.staticRenderFns=i.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Wt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,o,a){0;var r=o.data.scopedSlots,s=e.$scopedSlots,c=!!(r&&!r.$stable||s!==i&&!s.$stable||r&&e.$scopedSlots.$key!==r.$key),l=!!(a||e.$options._renderChildren||c);e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o);if(e.$options._renderChildren=a,e.$attrs=o.data.attrs||i,e.$listeners=n||i,t&&e.$options.props){xe(!1);for(var p=e._props,u=e.$options._propKeys||[],d=0;d<u.length;d++){var f=u[d],h=e.$options.props;p[f]=Ne(f,h,t,e)}xe(!0),e.$options.propsData=t}n=n||i;var m=e.$options._parentListeners;e.$options._parentListeners=n,Gt(e,n,m),l&&(e.$slots=dt(a,o.context),e.$forceUpdate());0}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,i=e.componentInstance;i._isMounted||(i._isMounted=!0,Yt(i,"mounted")),e.data.keepAlive&&(n._isMounted?((t=i)._inactive=!1,tn.push(t)):Zt(i,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,Xt(t)))return;if(!t._inactive){t._inactive=!0;for(var i=0;i<t.$children.length;i++)e(t.$children[i]);Yt(t,"deactivated")}}(t,!0):t.$destroy())}},It=Object.keys(Dt);function Rt(e,t,n,s,l){if(!o(e)){var p=n.$options._base;if(c(e)&&(e=p.extend(e)),"function"==typeof e){var u;if(o(e.cid)&&void 0===(e=function(e,t){if(r(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var n=Ht;n&&a(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(r(e.loading)&&a(e.loadingComp))return e.loadingComp;if(n&&!a(e.owners)){var i=e.owners=[n],s=!0,l=null,p=null;n.$on("hook:destroyed",(function(){return b(i,n)}));var u=function(e){for(var t=0,n=i.length;t<n;t++)i[t].$forceUpdate();e&&(i.length=0,null!==l&&(clearTimeout(l),l=null),null!==p&&(clearTimeout(p),p=null))},d=I((function(n){e.resolved=Bt(n,t),s?i.length=0:u(!0)})),h=I((function(t){a(e.errorComp)&&(e.error=!0,u(!0))})),m=e(d,h);return c(m)&&(f(m)?o(e.resolved)&&m.then(d,h):f(m.component)&&(m.component.then(d,h),a(m.error)&&(e.errorComp=Bt(m.error,t)),a(m.loading)&&(e.loadingComp=Bt(m.loading,t),0===m.delay?e.loading=!0:l=setTimeout((function(){l=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,u(!1))}),m.delay||200)),a(m.timeout)&&(p=setTimeout((function(){p=null,o(e.resolved)&&h(null)}),m.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(u=e,p)))return function(e,t,n,i,o){var a=ge();return a.asyncFactory=e,a.asyncMeta={data:t,context:n,children:i,tag:o},a}(u,t,n,s,l);t=t||{},kn(e),a(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",i=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var o=t.on||(t.on={}),r=o[i],s=t.model.callback;a(r)?(Array.isArray(r)?-1===r.indexOf(s):r!==s)&&(o[i]=[s].concat(r)):o[i]=s}(e.options,t);var d=function(e,t,n){var i=t.options.props;if(!o(i)){var r={},s=e.attrs,c=e.props;if(a(s)||a(c))for(var l in i){var p=O(l);ct(r,c,l,p,!0)||ct(r,s,l,p,!1)}return r}}(t,e);if(r(e.options.functional))return function(e,t,n,o,r){var s=e.options,c={},l=s.props;if(a(l))for(var p in l)c[p]=Ne(p,l,t||i);else a(n.attrs)&&Pt(c,n.attrs),a(n.props)&&Pt(c,n.props);var u=new jt(n,c,r,o,e),d=s.render.call(null,u._c,u);if(d instanceof he)return $t(d,n,u.parent,s,u);if(Array.isArray(d)){for(var f=lt(d)||[],h=new Array(f.length),m=0;m<f.length;m++)h[m]=$t(f[m],n,u.parent,s,u);return h}}(e,d,t,n,s);var h=t.on;if(t.on=t.nativeOn,r(e.options.abstract)){var m=t.slot;t={},m&&(t.slot=m)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<It.length;n++){var i=It[n],o=t[i],a=Dt[i];o===a||o&&o._merged||(t[i]=o?Nt(a,o):a)}}(t);var g=e.options.name||l;return new he("vue-component-"+e.cid+(g?"-"+g:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:d,listeners:h,tag:l,children:s},u)}}}function Nt(e,t){var n=function(n,i){e(n,i),t(n,i)};return n._merged=!0,n}function Ft(e,t,n,i,l,p){return(Array.isArray(n)||s(n))&&(l=i,i=n,n=void 0),r(p)&&(l=2),function(e,t,n,i,s){if(a(n)&&a(n.__ob__))return ge();a(n)&&a(n.is)&&(t=n.is);if(!t)return ge();0;Array.isArray(i)&&"function"==typeof i[0]&&((n=n||{}).scopedSlots={default:i[0]},i.length=0);2===s?i=lt(i):1===s&&(i=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(i));var l,p;if("string"==typeof t){var u;p=e.$vnode&&e.$vnode.ns||F.getTagNamespace(t),l=F.isReservedTag(t)?new he(F.parsePlatformTagName(t),n,i,void 0,void 0,e):n&&n.pre||!a(u=Re(e.$options,"components",t))?new he(t,n,i,void 0,void 0,e):Rt(u,n,e,i,t)}else l=Rt(t,n,e,i);return Array.isArray(l)?l:a(l)?(a(p)&&function e(t,n,i){t.ns=n,"foreignObject"===t.tag&&(n=void 0,i=!0);if(a(t.children))for(var s=0,c=t.children.length;s<c;s++){var l=t.children[s];a(l.tag)&&(o(l.ns)||r(i)&&"svg"!==l.tag)&&e(l,n,i)}}(l,p),a(n)&&function(e){c(e.style)&&it(e.style);c(e.class)&&it(e.class)}(n),l):ge()}(e,t,n,i,l)}var zt,Ht=null;function Bt(e,t){return(e.__esModule||se&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?t.extend(e):e}function Ut(e){return e.isComment&&e.asyncFactory}function Vt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(a(n)&&(a(n.componentOptions)||Ut(n)))return n}}function qt(e,t){zt.$on(e,t)}function Jt(e,t){zt.$off(e,t)}function Kt(e,t){var n=zt;return function i(){var o=t.apply(null,arguments);null!==o&&n.$off(e,i)}}function Gt(e,t,n){zt=e,rt(t,n||{},qt,Jt,Kt,e),zt=void 0}var Wt=null;function Qt(e){var t=Wt;return Wt=e,function(){Wt=t}}function Xt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Zt(e,t){if(t){if(e._directInactive=!1,Xt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Zt(e.$children[n]);Yt(e,"activated")}}function Yt(e,t){de();var n=e.$options[t],i=t+" hook";if(n)for(var o=0,a=n.length;o<a;o++)Ue(n[o],e,null,e,i);e._hasHookEvent&&e.$emit("hook:"+t),fe()}var en=[],tn=[],nn={},on=!1,an=!1,rn=0;var sn=0,cn=Date.now;if(q&&!W){var ln=window.performance;ln&&"function"==typeof ln.now&&cn()>document.createEvent("Event").timeStamp&&(cn=function(){return ln.now()})}function pn(){var e,t;for(sn=cn(),an=!0,en.sort((function(e,t){return e.id-t.id})),rn=0;rn<en.length;rn++)(e=en[rn]).before&&e.before(),t=e.id,nn[t]=null,e.run();var n=tn.slice(),i=en.slice();rn=en.length=tn.length=0,nn={},on=an=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Zt(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],i=n.vm;i._watcher===n&&i._isMounted&&!i._isDestroyed&&Yt(i,"updated")}}(i),oe&&F.devtools&&oe.emit("flush")}var un=0,dn=function(e,t,n,i,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),i?(this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync,this.before=i.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++un,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new re,this.newDepIds=new re,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!B.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=M)),this.value=this.lazy?void 0:this.get()};dn.prototype.get=function(){var e;de(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Be(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&it(e),fe(),this.cleanupDeps()}return e},dn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},dn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},dn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==nn[t]){if(nn[t]=!0,an){for(var n=en.length-1;n>rn&&en[n].id>e.id;)n--;en.splice(n+1,0,e)}else en.push(e);on||(on=!0,tt(pn))}}(this)},dn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){Be(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},dn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},dn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},dn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var fn={enumerable:!0,configurable:!0,get:M,set:M};function hn(e,t,n){fn.get=function(){return this[t][n]},fn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,fn)}function mn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},i=e._props={},o=e.$options._propKeys=[];e.$parent&&xe(!1);var a=function(a){o.push(a);var r=Ne(a,t,n,e);Oe(i,a,r),a in e||hn(e,"_props",a)};for(var r in t)a(r);xe(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?M:A(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;p(t=e._data="function"==typeof t?function(e,t){de();try{return e.call(t,t)}catch(e){return Be(e,t,"data()"),{}}finally{fe()}}(t,e):t||{})||(t={});var n=Object.keys(t),i=e.$options.props,o=(e.$options.methods,n.length);for(;o--;){var a=n[o];0,i&&w(i,a)||(r=void 0,36!==(r=(a+"").charCodeAt(0))&&95!==r&&hn(e,"_data",a))}var r;Ce(t,!0)}(e):Ce(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),i=ie();for(var o in t){var a=t[o],r="function"==typeof a?a:a.get;0,i||(n[o]=new dn(e,r||M,M,gn)),o in e||vn(e,o,a)}}(e,t.computed),t.watch&&t.watch!==ee&&function(e,t){for(var n in t){var i=t[n];if(Array.isArray(i))for(var o=0;o<i.length;o++)wn(e,n,i[o]);else wn(e,n,i)}}(e,t.watch)}var gn={lazy:!0};function vn(e,t,n){var i=!ie();"function"==typeof n?(fn.get=i?bn(t):yn(n),fn.set=M):(fn.get=n.get?i&&!1!==n.cache?bn(t):yn(n.get):M,fn.set=n.set||M),Object.defineProperty(e,t,fn)}function bn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),pe.target&&t.depend(),t.value}}function yn(e){return function(){return e.call(this,this)}}function wn(e,t,n,i){return p(n)&&(i=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,i)}var _n=0;function kn(e){var t=e.options;if(e.super){var n=kn(e.super);if(n!==e.superOptions){e.superOptions=n;var i=function(e){var t,n=e.options,i=e.sealedOptions;for(var o in n)n[o]!==i[o]&&(t||(t={}),t[o]=n[o]);return t}(e);i&&L(e.extendOptions,i),(t=e.options=Ie(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function xn(e){this._init(e)}function Sn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,i=n.cid,o=e._Ctor||(e._Ctor={});if(o[i])return o[i];var a=e.name||n.options.name;var r=function(e){this._init(e)};return(r.prototype=Object.create(n.prototype)).constructor=r,r.cid=t++,r.options=Ie(n.options,e),r.super=n,r.options.props&&function(e){var t=e.options.props;for(var n in t)hn(e.prototype,"_props",n)}(r),r.options.computed&&function(e){var t=e.options.computed;for(var n in t)vn(e.prototype,n,t[n])}(r),r.extend=n.extend,r.mixin=n.mixin,r.use=n.use,R.forEach((function(e){r[e]=n[e]})),a&&(r.options.components[a]=r),r.superOptions=n.options,r.extendOptions=e,r.sealedOptions=L({},r.options),o[i]=r,r}}function Cn(e){return e&&(e.Ctor.options.name||e.tag)}function On(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!u(e)&&e.test(t)}function An(e,t){var n=e.cache,i=e.keys,o=e._vnode;for(var a in n){var r=n[a];if(r){var s=Cn(r.componentOptions);s&&!t(s)&&Tn(n,a,i,o)}}}function Tn(e,t,n,i){var o=e[t];!o||i&&o.tag===i.tag||o.componentInstance.$destroy(),e[t]=null,b(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=_n++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),i=t._parentVnode;n.parent=t.parent,n._parentVnode=i;var o=i.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=Ie(kn(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Gt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,o=n&&n.context;e.$slots=dt(t._renderChildren,o),e.$scopedSlots=i,e._c=function(t,n,i,o){return Ft(e,t,n,i,o,!1)},e.$createElement=function(t,n,i,o){return Ft(e,t,n,i,o,!0)};var a=n&&n.data;Oe(e,"$attrs",a&&a.attrs||i,null,!0),Oe(e,"$listeners",t._parentListeners||i,null,!0)}(t),Yt(t,"beforeCreate"),function(e){var t=ut(e.$options.inject,e);t&&(xe(!1),Object.keys(t).forEach((function(n){Oe(e,n,t[n])})),xe(!0))}(t),mn(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),Yt(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(xn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Ae,e.prototype.$delete=Te,e.prototype.$watch=function(e,t,n){if(p(t))return wn(this,e,t,n);(n=n||{}).user=!0;var i=new dn(this,e,t,n);if(n.immediate)try{t.call(this,i.value)}catch(e){Be(e,this,'callback for immediate watcher "'+i.expression+'"')}return function(){i.teardown()}}}(xn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var i=this;if(Array.isArray(e))for(var o=0,a=e.length;o<a;o++)i.$on(e[o],n);else(i._events[e]||(i._events[e]=[])).push(n),t.test(e)&&(i._hasHookEvent=!0);return i},e.prototype.$once=function(e,t){var n=this;function i(){n.$off(e,i),t.apply(n,arguments)}return i.fn=t,n.$on(e,i),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var i=0,o=e.length;i<o;i++)n.$off(e[i],t);return n}var a,r=n._events[e];if(!r)return n;if(!t)return n._events[e]=null,n;for(var s=r.length;s--;)if((a=r[s])===t||a.fn===t){r.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?T(n):n;for(var i=T(arguments,1),o='event handler for "'+e+'"',a=0,r=n.length;a<r;a++)Ue(n[a],t,i,t,o)}return t}}(xn),function(e){e.prototype._update=function(e,t){var n=this,i=n.$el,o=n._vnode,a=Qt(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),a(),i&&(i.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Yt(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||b(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Yt(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(xn),function(e){Mt(e.prototype),e.prototype.$nextTick=function(e){return tt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,i=n.render,o=n._parentVnode;o&&(t.$scopedSlots=ht(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{Ht=t,e=i.call(t._renderProxy,t.$createElement)}catch(n){Be(n,t,"render"),e=t._vnode}finally{Ht=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof he||(e=ge()),e.parent=o,e}}(xn);var Ln=[String,RegExp,Array],En={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ln,exclude:Ln,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Tn(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(t){An(e,(function(e){return On(t,e)}))})),this.$watch("exclude",(function(t){An(e,(function(e){return!On(t,e)}))}))},render:function(){var e=this.$slots.default,t=Vt(e),n=t&&t.componentOptions;if(n){var i=Cn(n),o=this.include,a=this.exclude;if(o&&(!i||!On(o,i))||a&&i&&On(a,i))return t;var r=this.cache,s=this.keys,c=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;r[c]?(t.componentInstance=r[c].componentInstance,b(s,c),s.push(c)):(r[c]=t,s.push(c),this.max&&s.length>parseInt(this.max)&&Tn(r,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return F}};Object.defineProperty(e,"config",t),e.util={warn:ce,extend:L,mergeOptions:Ie,defineReactive:Oe},e.set=Ae,e.delete=Te,e.nextTick=tt,e.observable=function(e){return Ce(e),e},e.options=Object.create(null),R.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,L(e.options.components,En),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=T(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Ie(this.options,e),this}}(e),Sn(e),function(e){R.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&p(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(xn),Object.defineProperty(xn.prototype,"$isServer",{get:ie}),Object.defineProperty(xn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(xn,"FunctionalRenderContext",{value:jt}),xn.version="2.6.11";var Mn=g("style,class"),jn=g("input,textarea,option,select,progress"),$n=g("contenteditable,draggable,spellcheck"),Pn=g("events,caret,typing,plaintext-only"),Dn=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),In="http://www.w3.org/1999/xlink",Rn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Nn=function(e){return Rn(e)?e.slice(6,e.length):""},Fn=function(e){return null==e||!1===e};function zn(e){for(var t=e.data,n=e,i=e;a(i.componentInstance);)(i=i.componentInstance._vnode)&&i.data&&(t=Hn(i.data,t));for(;a(n=n.parent);)n&&n.data&&(t=Hn(t,n.data));return function(e,t){if(a(e)||a(t))return Bn(e,Un(t));return""}(t.staticClass,t.class)}function Hn(e,t){return{staticClass:Bn(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function Bn(e,t){return e?t?e+" "+t:e:t||""}function Un(e){return Array.isArray(e)?function(e){for(var t,n="",i=0,o=e.length;i<o;i++)a(t=Un(e[i]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):c(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Vn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},qn=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Jn=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Kn=function(e){return qn(e)||Jn(e)};var Gn=Object.create(null);var Wn=g("text,number,password,search,email,tel,url");var Qn=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(Vn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Xn={create:function(e,t){Zn(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Zn(e,!0),Zn(t))},destroy:function(e){Zn(e,!0)}};function Zn(e,t){var n=e.data.ref;if(a(n)){var i=e.context,o=e.componentInstance||e.elm,r=i.$refs;t?Array.isArray(r[n])?b(r[n],o):r[n]===o&&(r[n]=void 0):e.data.refInFor?Array.isArray(r[n])?r[n].indexOf(o)<0&&r[n].push(o):r[n]=[o]:r[n]=o}}var Yn=new he("",{},[]),ei=["create","activate","update","remove","destroy"];function ti(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&a(e.data)===a(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,i=a(n=e.data)&&a(n=n.attrs)&&n.type,o=a(n=t.data)&&a(n=n.attrs)&&n.type;return i===o||Wn(i)&&Wn(o)}(e,t)||r(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&o(t.asyncFactory.error))}function ni(e,t,n){var i,o,r={};for(i=t;i<=n;++i)a(o=e[i].key)&&(r[o]=i);return r}var ii={create:oi,update:oi,destroy:function(e){oi(e,Yn)}};function oi(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,i,o,a=e===Yn,r=t===Yn,s=ri(e.data.directives,e.context),c=ri(t.data.directives,t.context),l=[],p=[];for(n in c)i=s[n],o=c[n],i?(o.oldValue=i.value,o.oldArg=i.arg,ci(o,"update",t,e),o.def&&o.def.componentUpdated&&p.push(o)):(ci(o,"bind",t,e),o.def&&o.def.inserted&&l.push(o));if(l.length){var u=function(){for(var n=0;n<l.length;n++)ci(l[n],"inserted",t,e)};a?st(t,"insert",u):u()}p.length&&st(t,"postpatch",(function(){for(var n=0;n<p.length;n++)ci(p[n],"componentUpdated",t,e)}));if(!a)for(n in s)c[n]||ci(s[n],"unbind",e,e,r)}(e,t)}var ai=Object.create(null);function ri(e,t){var n,i,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(i=e[n]).modifiers||(i.modifiers=ai),o[si(i)]=i,i.def=Re(t.$options,"directives",i.name);return o}function si(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function ci(e,t,n,i,o){var a=e.def&&e.def[t];if(a)try{a(n.elm,e,n,i,o)}catch(i){Be(i,n.context,"directive "+e.name+" "+t+" hook")}}var li=[Xn,ii];function pi(e,t){var n=t.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(t.data.attrs))){var i,r,s=t.elm,c=e.data.attrs||{},l=t.data.attrs||{};for(i in a(l.__ob__)&&(l=t.data.attrs=L({},l)),l)r=l[i],c[i]!==r&&ui(s,i,r);for(i in(W||X)&&l.value!==c.value&&ui(s,"value",l.value),c)o(l[i])&&(Rn(i)?s.removeAttributeNS(In,Nn(i)):$n(i)||s.removeAttribute(i))}}function ui(e,t,n){e.tagName.indexOf("-")>-1?di(e,t,n):Dn(t)?Fn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):$n(t)?e.setAttribute(t,function(e,t){return Fn(t)||"false"===t?"false":"contenteditable"===e&&Pn(t)?t:"true"}(t,n)):Rn(t)?Fn(n)?e.removeAttributeNS(In,Nn(t)):e.setAttributeNS(In,t,n):di(e,t,n)}function di(e,t,n){if(Fn(n))e.removeAttribute(t);else{if(W&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var i=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",i)};e.addEventListener("input",i),e.__ieph=!0}e.setAttribute(t,n)}}var fi={create:pi,update:pi};function hi(e,t){var n=t.elm,i=t.data,r=e.data;if(!(o(i.staticClass)&&o(i.class)&&(o(r)||o(r.staticClass)&&o(r.class)))){var s=zn(t),c=n._transitionClasses;a(c)&&(s=Bn(s,Un(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var mi,gi={create:hi,update:hi};function vi(e,t,n){var i=mi;return function o(){var a=t.apply(null,arguments);null!==a&&wi(e,o,n,i)}}var bi=Ke&&!(Y&&Number(Y[1])<=53);function yi(e,t,n,i){if(bi){var o=sn,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=o||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}mi.addEventListener(e,t,te?{capture:n,passive:i}:n)}function wi(e,t,n,i){(i||mi).removeEventListener(e,t._wrapper||t,n)}function _i(e,t){if(!o(e.data.on)||!o(t.data.on)){var n=t.data.on||{},i=e.data.on||{};mi=t.elm,function(e){if(a(e.__r)){var t=W?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),rt(n,i,yi,wi,vi,t.context),mi=void 0}}var ki,xi={create:_i,update:_i};function Si(e,t){if(!o(e.data.domProps)||!o(t.data.domProps)){var n,i,r=t.elm,s=e.data.domProps||{},c=t.data.domProps||{};for(n in a(c.__ob__)&&(c=t.data.domProps=L({},c)),s)n in c||(r[n]="");for(n in c){if(i=c[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),i===s[n])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===n&&"PROGRESS"!==r.tagName){r._value=i;var l=o(i)?"":String(i);Ci(r,l)&&(r.value=l)}else if("innerHTML"===n&&Jn(r.tagName)&&o(r.innerHTML)){(ki=ki||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var p=ki.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;p.firstChild;)r.appendChild(p.firstChild)}else if(i!==s[n])try{r[n]=i}catch(e){}}}}function Ci(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,i=e._vModifiers;if(a(i)){if(i.number)return m(n)!==m(t);if(i.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var Oi={create:Si,update:Si},Ai=_((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var i=e.split(n);i.length>1&&(t[i[0].trim()]=i[1].trim())}})),t}));function Ti(e){var t=Li(e.style);return e.staticStyle?L(e.staticStyle,t):t}function Li(e){return Array.isArray(e)?E(e):"string"==typeof e?Ai(e):e}var Ei,Mi=/^--/,ji=/\s*!important$/,$i=function(e,t,n){if(Mi.test(t))e.style.setProperty(t,n);else if(ji.test(n))e.style.setProperty(O(t),n.replace(ji,""),"important");else{var i=Di(t);if(Array.isArray(n))for(var o=0,a=n.length;o<a;o++)e.style[i]=n[o];else e.style[i]=n}},Pi=["Webkit","Moz","ms"],Di=_((function(e){if(Ei=Ei||document.createElement("div").style,"filter"!==(e=x(e))&&e in Ei)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Pi.length;n++){var i=Pi[n]+t;if(i in Ei)return i}}));function Ii(e,t){var n=t.data,i=e.data;if(!(o(n.staticStyle)&&o(n.style)&&o(i.staticStyle)&&o(i.style))){var r,s,c=t.elm,l=i.staticStyle,p=i.normalizedStyle||i.style||{},u=l||p,d=Li(t.data.style)||{};t.data.normalizedStyle=a(d.__ob__)?L({},d):d;var f=function(e,t){var n,i={};if(t)for(var o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=Ti(o.data))&&L(i,n);(n=Ti(e.data))&&L(i,n);for(var a=e;a=a.parent;)a.data&&(n=Ti(a.data))&&L(i,n);return i}(t,!0);for(s in u)o(f[s])&&$i(c,s,"");for(s in f)(r=f[s])!==u[s]&&$i(c,s,null==r?"":r)}}var Ri={create:Ii,update:Ii},Ni=/\s+/;function Fi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Ni).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function zi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Ni).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",i=" "+t+" ";n.indexOf(i)>=0;)n=n.replace(i," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Hi(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&L(t,Bi(e.name||"v")),L(t,e),t}return"string"==typeof e?Bi(e):void 0}}var Bi=_((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),Ui=q&&!Q,Vi="transition",qi="transitionend",Ji="animation",Ki="animationend";Ui&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Vi="WebkitTransition",qi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ji="WebkitAnimation",Ki="webkitAnimationEnd"));var Gi=q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Wi(e){Gi((function(){Gi(e)}))}function Qi(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),Fi(e,t))}function Xi(e,t){e._transitionClasses&&b(e._transitionClasses,t),zi(e,t)}function Zi(e,t,n){var i=eo(e,t),o=i.type,a=i.timeout,r=i.propCount;if(!o)return n();var s="transition"===o?qi:Ki,c=0,l=function(){e.removeEventListener(s,p),n()},p=function(t){t.target===e&&++c>=r&&l()};setTimeout((function(){c<r&&l()}),a+1),e.addEventListener(s,p)}var Yi=/\b(transform|all)(,|$)/;function eo(e,t){var n,i=window.getComputedStyle(e),o=(i[Vi+"Delay"]||"").split(", "),a=(i[Vi+"Duration"]||"").split(", "),r=to(o,a),s=(i[Ji+"Delay"]||"").split(", "),c=(i[Ji+"Duration"]||"").split(", "),l=to(s,c),p=0,u=0;return"transition"===t?r>0&&(n="transition",p=r,u=a.length):"animation"===t?l>0&&(n="animation",p=l,u=c.length):u=(n=(p=Math.max(r,l))>0?r>l?"transition":"animation":null)?"transition"===n?a.length:c.length:0,{type:n,timeout:p,propCount:u,hasTransform:"transition"===n&&Yi.test(i[Vi+"Property"])}}function to(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return no(t)+no(e[n])})))}function no(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function io(e,t){var n=e.elm;a(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Hi(e.data.transition);if(!o(i)&&!a(n._enterCb)&&1===n.nodeType){for(var r=i.css,s=i.type,l=i.enterClass,p=i.enterToClass,u=i.enterActiveClass,d=i.appearClass,f=i.appearToClass,h=i.appearActiveClass,g=i.beforeEnter,v=i.enter,b=i.afterEnter,y=i.enterCancelled,w=i.beforeAppear,_=i.appear,k=i.afterAppear,x=i.appearCancelled,S=i.duration,C=Wt,O=Wt.$vnode;O&&O.parent;)C=O.context,O=O.parent;var A=!C._isMounted||!e.isRootInsert;if(!A||_||""===_){var T=A&&d?d:l,L=A&&h?h:u,E=A&&f?f:p,M=A&&w||g,j=A&&"function"==typeof _?_:v,$=A&&k||b,P=A&&x||y,D=m(c(S)?S.enter:S);0;var R=!1!==r&&!Q,N=ro(j),F=n._enterCb=I((function(){R&&(Xi(n,E),Xi(n,L)),F.cancelled?(R&&Xi(n,T),P&&P(n)):$&&$(n),n._enterCb=null}));e.data.show||st(e,"insert",(function(){var t=n.parentNode,i=t&&t._pending&&t._pending[e.key];i&&i.tag===e.tag&&i.elm._leaveCb&&i.elm._leaveCb(),j&&j(n,F)})),M&&M(n),R&&(Qi(n,T),Qi(n,L),Wi((function(){Xi(n,T),F.cancelled||(Qi(n,E),N||(ao(D)?setTimeout(F,D):Zi(n,s,F)))}))),e.data.show&&(t&&t(),j&&j(n,F)),R||N||F()}}}function oo(e,t){var n=e.elm;a(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Hi(e.data.transition);if(o(i)||1!==n.nodeType)return t();if(!a(n._leaveCb)){var r=i.css,s=i.type,l=i.leaveClass,p=i.leaveToClass,u=i.leaveActiveClass,d=i.beforeLeave,f=i.leave,h=i.afterLeave,g=i.leaveCancelled,v=i.delayLeave,b=i.duration,y=!1!==r&&!Q,w=ro(f),_=m(c(b)?b.leave:b);0;var k=n._leaveCb=I((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),y&&(Xi(n,p),Xi(n,u)),k.cancelled?(y&&Xi(n,l),g&&g(n)):(t(),h&&h(n)),n._leaveCb=null}));v?v(x):x()}function x(){k.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),d&&d(n),y&&(Qi(n,l),Qi(n,u),Wi((function(){Xi(n,l),k.cancelled||(Qi(n,p),w||(ao(_)?setTimeout(k,_):Zi(n,s,k)))}))),f&&f(n,k),y||w||k())}}function ao(e){return"number"==typeof e&&!isNaN(e)}function ro(e){if(o(e))return!1;var t=e.fns;return a(t)?ro(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function so(e,t){!0!==t.data.show&&io(t)}var co=function(e){var t,n,i={},c=e.modules,l=e.nodeOps;for(t=0;t<ei.length;++t)for(i[ei[t]]=[],n=0;n<c.length;++n)a(c[n][ei[t]])&&i[ei[t]].push(c[n][ei[t]]);function p(e){var t=l.parentNode(e);a(t)&&l.removeChild(t,e)}function u(e,t,n,o,s,c,p){if(a(e.elm)&&a(c)&&(e=c[p]=be(e)),e.isRootInsert=!s,!function(e,t,n,o){var s=e.data;if(a(s)){var c=a(e.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(e,!1),a(e.componentInstance))return d(e,t),f(n,e.elm,o),r(c)&&function(e,t,n,o){var r,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(r=s.data)&&a(r=r.transition)){for(r=0;r<i.activate.length;++r)i.activate[r](Yn,s);t.push(s);break}f(n,e.elm,o)}(e,t,n,o),!0}}(e,t,n,o)){var u=e.data,m=e.children,g=e.tag;a(g)?(e.elm=e.ns?l.createElementNS(e.ns,g):l.createElement(g,e),b(e),h(e,m,t),a(u)&&v(e,t),f(n,e.elm,o)):r(e.isComment)?(e.elm=l.createComment(e.text),f(n,e.elm,o)):(e.elm=l.createTextNode(e.text),f(n,e.elm,o))}}function d(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,m(e)?(v(e,t),b(e)):(Zn(e),t.push(e))}function f(e,t,n){a(e)&&(a(n)?l.parentNode(n)===e&&l.insertBefore(e,t,n):l.appendChild(e,t))}function h(e,t,n){if(Array.isArray(t)){0;for(var i=0;i<t.length;++i)u(t[i],n,e.elm,null,!0,t,i)}else s(e.text)&&l.appendChild(e.elm,l.createTextNode(String(e.text)))}function m(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function v(e,n){for(var o=0;o<i.create.length;++o)i.create[o](Yn,e);a(t=e.data.hook)&&(a(t.create)&&t.create(Yn,e),a(t.insert)&&n.push(e))}function b(e){var t;if(a(t=e.fnScopeId))l.setStyleScope(e.elm,t);else for(var n=e;n;)a(t=n.context)&&a(t=t.$options._scopeId)&&l.setStyleScope(e.elm,t),n=n.parent;a(t=Wt)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&l.setStyleScope(e.elm,t)}function y(e,t,n,i,o,a){for(;i<=o;++i)u(n[i],a,e,t,!1,n,i)}function w(e){var t,n,o=e.data;if(a(o))for(a(t=o.hook)&&a(t=t.destroy)&&t(e),t=0;t<i.destroy.length;++t)i.destroy[t](e);if(a(t=e.children))for(n=0;n<e.children.length;++n)w(e.children[n])}function _(e,t,n){for(;t<=n;++t){var i=e[t];a(i)&&(a(i.tag)?(k(i),w(i)):p(i.elm))}}function k(e,t){if(a(t)||a(e.data)){var n,o=i.remove.length+1;for(a(t)?t.listeners+=o:t=function(e,t){function n(){0==--n.listeners&&p(e)}return n.listeners=t,n}(e.elm,o),a(n=e.componentInstance)&&a(n=n._vnode)&&a(n.data)&&k(n,t),n=0;n<i.remove.length;++n)i.remove[n](e,t);a(n=e.data.hook)&&a(n=n.remove)?n(e,t):t()}else p(e.elm)}function x(e,t,n,i){for(var o=n;o<i;o++){var r=t[o];if(a(r)&&ti(e,r))return o}}function S(e,t,n,s,c,p){if(e!==t){a(t.elm)&&a(s)&&(t=s[c]=be(t));var d=t.elm=e.elm;if(r(e.isAsyncPlaceholder))a(t.asyncFactory.resolved)?A(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(r(t.isStatic)&&r(e.isStatic)&&t.key===e.key&&(r(t.isCloned)||r(t.isOnce)))t.componentInstance=e.componentInstance;else{var f,h=t.data;a(h)&&a(f=h.hook)&&a(f=f.prepatch)&&f(e,t);var g=e.children,v=t.children;if(a(h)&&m(t)){for(f=0;f<i.update.length;++f)i.update[f](e,t);a(f=h.hook)&&a(f=f.update)&&f(e,t)}o(t.text)?a(g)&&a(v)?g!==v&&function(e,t,n,i,r){var s,c,p,d=0,f=0,h=t.length-1,m=t[0],g=t[h],v=n.length-1,b=n[0],w=n[v],k=!r;for(0;d<=h&&f<=v;)o(m)?m=t[++d]:o(g)?g=t[--h]:ti(m,b)?(S(m,b,i,n,f),m=t[++d],b=n[++f]):ti(g,w)?(S(g,w,i,n,v),g=t[--h],w=n[--v]):ti(m,w)?(S(m,w,i,n,v),k&&l.insertBefore(e,m.elm,l.nextSibling(g.elm)),m=t[++d],w=n[--v]):ti(g,b)?(S(g,b,i,n,f),k&&l.insertBefore(e,g.elm,m.elm),g=t[--h],b=n[++f]):(o(s)&&(s=ni(t,d,h)),o(c=a(b.key)?s[b.key]:x(b,t,d,h))?u(b,i,e,m.elm,!1,n,f):ti(p=t[c],b)?(S(p,b,i,n,f),t[c]=void 0,k&&l.insertBefore(e,p.elm,m.elm)):u(b,i,e,m.elm,!1,n,f),b=n[++f]);d>h?y(e,o(n[v+1])?null:n[v+1].elm,n,f,v,i):f>v&&_(t,d,h)}(d,g,v,n,p):a(v)?(a(e.text)&&l.setTextContent(d,""),y(d,null,v,0,v.length-1,n)):a(g)?_(g,0,g.length-1):a(e.text)&&l.setTextContent(d,""):e.text!==t.text&&l.setTextContent(d,t.text),a(h)&&a(f=h.hook)&&a(f=f.postpatch)&&f(e,t)}}}function C(e,t,n){if(r(n)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var i=0;i<t.length;++i)t[i].data.hook.insert(t[i])}var O=g("attrs,class,staticClass,staticStyle,key");function A(e,t,n,i){var o,s=t.tag,c=t.data,l=t.children;if(i=i||c&&c.pre,t.elm=e,r(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(a(c)&&(a(o=c.hook)&&a(o=o.init)&&o(t,!0),a(o=t.componentInstance)))return d(t,n),!0;if(a(s)){if(a(l))if(e.hasChildNodes())if(a(o=c)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==e.innerHTML)return!1}else{for(var p=!0,u=e.firstChild,f=0;f<l.length;f++){if(!u||!A(u,l[f],n,i)){p=!1;break}u=u.nextSibling}if(!p||u)return!1}else h(t,l,n);if(a(c)){var m=!1;for(var g in c)if(!O(g)){m=!0,v(t,n);break}!m&&c.class&&it(c.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!o(t)){var c,p=!1,d=[];if(o(e))p=!0,u(t,d);else{var f=a(e.nodeType);if(!f&&ti(e,t))S(e,t,d,null,null,s);else{if(f){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),n=!0),r(n)&&A(e,t,d))return C(t,d,!0),e;c=e,e=new he(l.tagName(c).toLowerCase(),{},[],void 0,c)}var h=e.elm,g=l.parentNode(h);if(u(t,d,h._leaveCb?null:g,l.nextSibling(h)),a(t.parent))for(var v=t.parent,b=m(t);v;){for(var y=0;y<i.destroy.length;++y)i.destroy[y](v);if(v.elm=t.elm,b){for(var k=0;k<i.create.length;++k)i.create[k](Yn,v);var x=v.data.hook.insert;if(x.merged)for(var O=1;O<x.fns.length;O++)x.fns[O]()}else Zn(v);v=v.parent}a(g)?_([e],0,0):a(e.tag)&&w(e)}}return C(t,d,p),t.elm}a(e)&&w(e)}}({nodeOps:Qn,modules:[fi,gi,xi,Oi,Ri,q?{create:so,activate:so,remove:function(e,t){!0!==e.data.show?oo(e,t):t()}}:{}].concat(li)});Q&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&vo(e,"input")}));var lo={inserted:function(e,t,n,i){"select"===n.tag?(i.elm&&!i.elm._vOptions?st(n,"postpatch",(function(){lo.componentUpdated(e,t,n)})):po(e,t,n.context),e._vOptions=[].map.call(e.options,ho)):("textarea"===n.tag||Wn(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",mo),e.addEventListener("compositionend",go),e.addEventListener("change",go),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){po(e,t,n.context);var i=e._vOptions,o=e._vOptions=[].map.call(e.options,ho);if(o.some((function(e,t){return!P(e,i[t])})))(e.multiple?t.value.some((function(e){return fo(e,o)})):t.value!==t.oldValue&&fo(t.value,o))&&vo(e,"change")}}};function po(e,t,n){uo(e,t,n),(W||X)&&setTimeout((function(){uo(e,t,n)}),0)}function uo(e,t,n){var i=t.value,o=e.multiple;if(!o||Array.isArray(i)){for(var a,r,s=0,c=e.options.length;s<c;s++)if(r=e.options[s],o)a=D(i,ho(r))>-1,r.selected!==a&&(r.selected=a);else if(P(ho(r),i))return void(e.selectedIndex!==s&&(e.selectedIndex=s));o||(e.selectedIndex=-1)}}function fo(e,t){return t.every((function(t){return!P(t,e)}))}function ho(e){return"_value"in e?e._value:e.value}function mo(e){e.target.composing=!0}function go(e){e.target.composing&&(e.target.composing=!1,vo(e.target,"input"))}function vo(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function bo(e){return!e.componentInstance||e.data&&e.data.transition?e:bo(e.componentInstance._vnode)}var yo={model:lo,show:{bind:function(e,t,n){var i=t.value,o=(n=bo(n)).data&&n.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;i&&o?(n.data.show=!0,io(n,(function(){e.style.display=a}))):e.style.display=i?a:"none"},update:function(e,t,n){var i=t.value;!i!=!t.oldValue&&((n=bo(n)).data&&n.data.transition?(n.data.show=!0,i?io(n,(function(){e.style.display=e.__vOriginalDisplay})):oo(n,(function(){e.style.display="none"}))):e.style.display=i?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,i,o){o||(e.style.display=e.__vOriginalDisplay)}}},wo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function _o(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?_o(Vt(t.children)):e}function ko(e){var t={},n=e.$options;for(var i in n.propsData)t[i]=e[i];var o=n._parentListeners;for(var a in o)t[x(a)]=o[a];return t}function xo(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var So=function(e){return e.tag||Ut(e)},Co=function(e){return"show"===e.name},Oo={name:"transition",props:wo,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(So)).length){0;var i=this.mode;0;var o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var a=_o(o);if(!a)return o;if(this._leaving)return xo(e,o);var r="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?r+"comment":r+a.tag:s(a.key)?0===String(a.key).indexOf(r)?a.key:r+a.key:a.key;var c=(a.data||(a.data={})).transition=ko(this),l=this._vnode,p=_o(l);if(a.data.directives&&a.data.directives.some(Co)&&(a.data.show=!0),p&&p.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(a,p)&&!Ut(p)&&(!p.componentInstance||!p.componentInstance._vnode.isComment)){var u=p.data.transition=L({},c);if("out-in"===i)return this._leaving=!0,st(u,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),xo(e,o);if("in-out"===i){if(Ut(a))return l;var d,f=function(){d()};st(c,"afterEnter",f),st(c,"enterCancelled",f),st(u,"delayLeave",(function(e){d=e}))}}return o}}},Ao=L({tag:String,moveClass:String},wo);function To(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Lo(e){e.data.newPos=e.elm.getBoundingClientRect()}function Eo(e){var t=e.data.pos,n=e.data.newPos,i=t.left-n.left,o=t.top-n.top;if(i||o){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+i+"px,"+o+"px)",a.transitionDuration="0s"}}delete Ao.mode;var Mo={Transition:Oo,TransitionGroup:{props:Ao,beforeMount:function(){var e=this,t=this._update;this._update=function(n,i){var o=Qt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,o(),t.call(e,n,i)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),i=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],r=ko(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))a.push(c),n[c.key]=c,(c.data||(c.data={})).transition=r;else;}if(i){for(var l=[],p=[],u=0;u<i.length;u++){var d=i[u];d.data.transition=r,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?l.push(d):p.push(d)}this.kept=e(t,null,l),this.removed=p}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(To),e.forEach(Lo),e.forEach(Eo),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,i=n.style;Qi(n,t),i.transform=i.WebkitTransform=i.transitionDuration="",n.addEventListener(qi,n._moveCb=function e(i){i&&i.target!==n||i&&!/transform$/.test(i.propertyName)||(n.removeEventListener(qi,e),n._moveCb=null,Xi(n,t))})}})))},methods:{hasMove:function(e,t){if(!Ui)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){zi(n,e)})),Fi(n,t),n.style.display="none",this.$el.appendChild(n);var i=eo(n);return this.$el.removeChild(n),this._hasMove=i.hasTransform}}}};xn.config.mustUseProp=function(e,t,n){return"value"===n&&jn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},xn.config.isReservedTag=Kn,xn.config.isReservedAttr=Mn,xn.config.getTagNamespace=function(e){return Jn(e)?"svg":"math"===e?"math":void 0},xn.config.isUnknownElement=function(e){if(!q)return!0;if(Kn(e))return!1;if(e=e.toLowerCase(),null!=Gn[e])return Gn[e];var t=document.createElement(e);return e.indexOf("-")>-1?Gn[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Gn[e]=/HTMLUnknownElement/.test(t.toString())},L(xn.options.directives,yo),L(xn.options.components,Mo),xn.prototype.__patch__=q?co:M,xn.prototype.$mount=function(e,t){return function(e,t,n){var i;return e.$el=t,e.$options.render||(e.$options.render=ge),Yt(e,"beforeMount"),i=function(){e._update(e._render(),n)},new dn(e,i,M,{before:function(){e._isMounted&&!e._isDestroyed&&Yt(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,Yt(e,"mounted")),e}(this,e=e&&q?function(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}(e):void 0,t)},q&&setTimeout((function(){F.devtools&&oe&&oe.emit("init",xn)}),0),t.a=xn}).call(this,n(36),n(89).setImmediate)},function(e,t,n){var i=n(3),o=n(31);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){(t=n(4)(!1)).push([e.i,'.ss-main{position:relative;display:inline-block;user-select:none;color:#666;width:100%}.ss-main .ss-single-selected{display:flex;cursor:pointer;width:100%;height:30px;padding:6px;border:1px solid #dcdee2;border-radius:4px;background-color:#fff;outline:0;box-sizing:border-box;transition:background-color .2s}.ss-main .ss-single-selected.ss-disabled{background-color:#dcdee2;cursor:not-allowed}.ss-main .ss-single-selected.ss-open-above{border-top-left-radius:0;border-top-right-radius:0}.ss-main .ss-single-selected.ss-open-below{border-bottom-left-radius:0;border-bottom-right-radius:0}.ss-main .ss-single-selected .placeholder{flex:1 1 100%;text-align:left;width:calc(100% - 30px);line-height:1em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ss-main .ss-single-selected .placeholder,.ss-main .ss-single-selected .placeholder *{display:flex;align-items:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ss-main .ss-single-selected .placeholder *{width:auto}.ss-main .ss-single-selected .placeholder .ss-disabled{color:#dedede}.ss-main .ss-single-selected .ss-deselect{display:flex;align-items:center;justify-content:flex-end;flex:0 1 auto;margin:0 6px;font-weight:700}.ss-main .ss-single-selected .ss-deselect.ss-hide{display:none}.ss-main .ss-single-selected .ss-arrow{display:flex;align-items:center;justify-content:flex-end;flex:0 1 auto;margin:0 6px}.ss-main .ss-single-selected .ss-arrow span{border:solid #666;border-width:0 2px 2px 0;display:inline-block;padding:3px;transition:transform .2s,margin .2s}.ss-main .ss-single-selected .ss-arrow span.arrow-up{transform:rotate(-135deg);margin:3px 0 0}.ss-main .ss-single-selected .ss-arrow span.arrow-down{transform:rotate(45deg);margin:-3px 0 0}.ss-main .ss-multi-selected{display:flex;flex-direction:row;cursor:pointer;min-height:30px;width:100%;padding:0 0 0 3px;border:1px solid #dcdee2;border-radius:4px;background-color:#fff;outline:0;box-sizing:border-box;transition:background-color .2s}.ss-main .ss-multi-selected.ss-disabled{background-color:#dcdee2;cursor:not-allowed}.ss-main .ss-multi-selected.ss-disabled .ss-values .ss-disabled{color:#666}.ss-main .ss-multi-selected.ss-disabled .ss-values .ss-value .ss-value-delete{cursor:not-allowed}.ss-main .ss-multi-selected.ss-open-above{border-top-left-radius:0;border-top-right-radius:0}.ss-main .ss-multi-selected.ss-open-below{border-bottom-left-radius:0;border-bottom-right-radius:0}.ss-main .ss-multi-selected .ss-values{display:flex;flex-wrap:wrap;justify-content:flex-start;flex:1 1 100%;width:calc(100% - 30px)}.ss-main .ss-multi-selected .ss-values .ss-disabled{display:flex;padding:4px 5px;margin:2px 0;line-height:1em;align-items:center;width:100%;color:#dedede;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@keyframes scaleIn{0%{transform:scale(0);opacity:0}to{transform:scale(1);opacity:1}}@keyframes scaleOut{0%{transform:scale(1);opacity:1}to{transform:scale(0);opacity:0}}.ss-main .ss-multi-selected .ss-values .ss-value{display:flex;user-select:none;align-items:center;font-size:12px;padding:3px 5px;margin:3px 5px 3px 0;color:#fff;background-color:#5897fb;border-radius:4px;animation-name:scaleIn;animation-duration:.2s;animation-timing-function:ease-out;animation-fill-mode:both}.ss-main .ss-multi-selected .ss-values .ss-value.ss-out{animation-name:scaleOut;animation-duration:.2s;animation-timing-function:ease-out}.ss-main .ss-multi-selected .ss-values .ss-value .ss-value-delete{margin:0 0 0 5px;cursor:pointer}.ss-main .ss-multi-selected .ss-add{display:flex;flex:0 1 3px;margin:9px 12px 0 5px}.ss-main .ss-multi-selected .ss-add .ss-plus{display:flex;justify-content:center;align-items:center;background:#666;position:relative;height:10px;width:2px;transition:transform .2s}.ss-main .ss-multi-selected .ss-add .ss-plus:after{background:#666;content:"";position:absolute;height:2px;width:10px;left:-4px;top:4px}.ss-main .ss-multi-selected .ss-add .ss-plus.ss-cross{transform:rotate(45deg)}.ss-content{position:absolute;width:100%;margin:-1px 0 0;box-sizing:border-box;border:1px solid #dcdee2;z-index:1010;background-color:#fff;transform-origin:center top;transition:transform .2s,opacity .2s;opacity:0;transform:scaleY(0)}.ss-content.ss-open{display:block;opacity:1;transform:scaleY(1)}.ss-content .ss-search{display:flex;flex-direction:row;padding:8px 8px 6px}.ss-content .ss-search.ss-hide,.ss-content .ss-search.ss-hide input{height:0;opacity:0;padding:0;margin:0}.ss-content .ss-search input{display:inline-flex;font-size:inherit;line-height:inherit;flex:1 1 auto;width:100%;min-width:0;height:30px;padding:6px 8px;margin:0;border:1px solid #dcdee2;border-radius:4px;background-color:#fff;outline:0;text-align:left;box-sizing:border-box;-webkit-box-sizing:border-box;-webkit-appearance:textfield}.ss-content .ss-search input::placeholder{color:#8a8a8a;vertical-align:middle}.ss-content .ss-search input:focus{box-shadow:0 0 5px #5897fb}.ss-content .ss-search .ss-addable{display:inline-flex;justify-content:center;align-items:center;cursor:pointer;font-size:22px;font-weight:700;flex:0 0 30px;height:30px;margin:0 0 0 8px;border:1px solid #dcdee2;border-radius:4px;box-sizing:border-box}.ss-content .ss-addable{padding-top:0}.ss-content .ss-list{max-height:200px;overflow-x:hidden;overflow-y:auto;text-align:left}.ss-content .ss-list .ss-optgroup .ss-optgroup-label{padding:6px 10px;font-weight:700}.ss-content .ss-list .ss-optgroup .ss-option{padding:6px 6px 6px 25px}.ss-content .ss-list .ss-optgroup-label-selectable{cursor:pointer}.ss-content .ss-list .ss-optgroup-label-selectable:hover{color:#fff;background-color:#5897fb}.ss-content .ss-list .ss-option{padding:6px 10px;cursor:pointer;user-select:none}.ss-content .ss-list .ss-option *{display:inline-block}.ss-content .ss-list .ss-option.ss-highlighted,.ss-content .ss-list .ss-option:hover{color:#fff;background-color:#5897fb}.ss-content .ss-list .ss-option.ss-disabled{cursor:not-allowed;color:#dedede;background-color:#fff}.ss-content .ss-list .ss-option:not(.ss-disabled).ss-option-selected{color:#666;background-color:rgba(88,151,251,.1)}.ss-content .ss-list .ss-option.ss-hide{display:none}.ss-content .ss-list .ss-option .ss-search-highlight{background-color:#fffb8c}',""]),e.exports=t},function(e,t,n){var i=n(3),o=n(33);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){(t=n(4)(!1)).push([e.i,".stadiaplus_dropdown.disabled{opacity:.6;pointer-events:none;cursor:default}.stadiaplus_dropdown.style-dark.ss-main{border-color:#3c3e43;width:auto}.stadiaplus_dropdown.style-dark.ss-main .ss-content{border-color:#3c3e43}.stadiaplus_dropdown.style-dark.ss-main .ss-content .ss-list .ss-option{background-color:#3c3e43;color:rgba(255,255,255,.8)}.stadiaplus_dropdown.style-dark.ss-main .ss-content .ss-list .ss-option.ss-disabled{background-color:#3c3e43;color:rgba(255,255,255,.4)}.stadiaplus_dropdown.style-dark.ss-main .ss-multi-selected,.stadiaplus_dropdown.style-dark.ss-main .ss-single-selected{background:transparent;border:none;border-bottom:#93959f 1px solid;border-radius:0;width:180px}.stadiaplus_dropdown.style-dark.ss-main .ss-multi-selected .placeholder,.stadiaplus_dropdown.style-dark.ss-main .ss-single-selected .placeholder{color:rgba(255,255,255,.8)}.stadiaplus_dropdown.style-dark.ss-main .ss-multi-selected .ss-plus span,.stadiaplus_dropdown.style-dark.ss-main .ss-multi-selected .ss-arrow span,.stadiaplus_dropdown.style-dark.ss-main .ss-single-selected .ss-plus span,.stadiaplus_dropdown.style-dark.ss-main .ss-single-selected .ss-arrow span{border-color:#93959f}.stadiaplus_dropdown.style-light.ss-main{width:auto}.stadiaplus_dropdown.style-light.ss-main .ss-multi-selected,.stadiaplus_dropdown.style-light.ss-main .ss-single-selected{background:transparent;border:none;border-bottom:#ccc 1px solid;border-radius:0;width:180px}.stadiaplus_dropdown.style-light.ss-main .ss-multi-selected .ss-plus span,.stadiaplus_dropdown.style-light.ss-main .ss-multi-selected .ss-arrow span,.stadiaplus_dropdown.style-light.ss-main .ss-single-selected .ss-plus span,.stadiaplus_dropdown.style-light.ss-main .ss-single-selected .ss-arrow span{border-color:#ccc}.stadiaplus_dropdown.style-slimselect-large.ss-main{width:200px;height:40px}.stadiaplus_dropdown.style-slimselect-large.ss-main .ss-multi-selected,.stadiaplus_dropdown.style-slimselect-large.ss-main .ss-single-selected{height:100%}",""]),e.exports=t},function(e,t,n){var i=n(3),o=n(35);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:("html","html"),singleton:!1},r=(i(o,a),o.locals?o.locals:{});e.exports=r},function(e,t,n){(t=n(4)(!1)).push([e.i,'.pretty *{box-sizing:border-box}.pretty input:not([type=checkbox]):not([type=radio]){display:none}.pretty{position:relative;display:inline-block;margin-right:1em;white-space:nowrap;line-height:1}.pretty input{position:absolute;left:0;top:0;min-width:1em;width:100%;height:100%;z-index:2;opacity:0;margin:0;padding:0;cursor:pointer}.pretty .state label{position:initial;display:inline-block;font-weight:normal;margin:0;text-indent:1.5em;min-width:calc(1em + 2px)}.pretty .state label:before,.pretty .state label:after{content:"";width:calc(1em + 2px);height:calc(1em + 2px);display:block;box-sizing:border-box;border-radius:0;border:1px solid transparent;z-index:0;position:absolute;left:0;top:calc((0% - (100% - 1em)) - 8%);background-color:transparent}.pretty .state label:before{border-color:#bdc3c7}.pretty .state.p-is-hover,.pretty .state.p-is-indeterminate{display:none}@keyframes zoom{0%{opacity:0;transform:scale(0)}}@keyframes tada{0%{animation-timing-function:ease-in;opacity:0;transform:scale(7)}38%{animation-timing-function:ease-out;opacity:1;transform:scale(1)}55%{animation-timing-function:ease-in;transform:scale(1.5)}72%{animation-timing-function:ease-out;transform:scale(1)}81%{animation-timing-function:ease-in;transform:scale(1.24)}89%{animation-timing-function:ease-out;transform:scale(1)}95%{animation-timing-function:ease-in;transform:scale(1.04)}100%{animation-timing-function:ease-out;transform:scale(1)}}@keyframes jelly{0%{transform:scale3d(1, 1, 1)}30%{transform:scale3d(0.75, 1.25, 1)}40%{transform:scale3d(1.25, 0.75, 1)}50%{transform:scale3d(0.85, 1.15, 1)}65%{transform:scale3d(1.05, 0.95, 1)}75%{transform:scale3d(0.95, 1.05, 1)}100%{transform:scale3d(1, 1, 1)}}@keyframes rotate{0%{opacity:0;transform:translateZ(-200px) rotate(-45deg)}100%{opacity:1;transform:translateZ(0) rotate(0)}}@keyframes pulse{0%{box-shadow:0px 0px 0px 0px #bdc3c7}100%{box-shadow:0px 0px 0px 1.5em rgba(189,195,199,0)}}.pretty.p-default.p-fill .state label:after{transform:scale(1)}.pretty.p-default .state label:after{transform:scale(0.6)}.pretty.p-default input:checked~.state label:after{background-color:#bdc3c7 !important}.pretty.p-default.p-thick .state label:before,.pretty.p-default.p-thick .state label:after{border-width:calc(1em / 7)}.pretty.p-default.p-thick .state label:after{transform:scale(0.4) !important}.pretty.p-icon .state .icon{position:absolute;font-size:1em;width:calc(1em + 2px);height:calc(1em + 2px);left:0;z-index:1;text-align:center;line-height:normal;top:calc((0% - (100% - 1em)) - 8%);border:1px solid transparent;opacity:0}.pretty.p-icon .state .icon:before{margin:0;width:100%;height:100%;text-align:center;display:flex;flex:1;justify-content:center;align-items:center;line-height:1}.pretty.p-icon input:checked~.state .icon{opacity:1}.pretty.p-icon input:checked~.state label:before{border-color:#5a656b}.pretty.p-svg .state .svg{position:absolute;font-size:1em;width:calc(1em + 2px);height:calc(1em + 2px);left:0;z-index:1;text-align:center;line-height:normal;top:calc((0% - (100% - 1em)) - 8%);border:1px solid transparent;opacity:0}.pretty.p-svg .state svg{margin:0;width:100%;height:100%;text-align:center;display:flex;flex:1;justify-content:center;align-items:center;line-height:1}.pretty.p-svg input:checked~.state .svg{opacity:1}.pretty.p-image .state img{opacity:0;position:absolute;width:calc(1em + 2px);height:calc(1em + 2px);top:0;top:calc((0% - (100% - 1em)) - 8%);left:0;z-index:0;text-align:center;line-height:normal;transform:scale(0.8)}.pretty.p-image input:checked~.state img{opacity:1}.pretty.p-switch input{min-width:2em}.pretty.p-switch .state{position:relative}.pretty.p-switch .state:before{content:"";border:1px solid #bdc3c7;border-radius:60px;width:2em;box-sizing:unset;height:calc(1em + 2px);position:absolute;top:0;top:calc((0% - (100% - 1em)) - 16%);z-index:0;transition:all .5s ease}.pretty.p-switch .state label{text-indent:2.5em}.pretty.p-switch .state label:before,.pretty.p-switch .state label:after{transition:all .5s ease;border-radius:100%;left:0;border-color:transparent;transform:scale(0.8)}.pretty.p-switch .state label:after{background-color:#bdc3c7 !important}.pretty.p-switch input:checked~.state:before{border-color:#5a656b}.pretty.p-switch input:checked~.state label:before{opacity:0}.pretty.p-switch input:checked~.state label:after{background-color:#5a656b !important;left:1em}.pretty.p-switch.p-fill input:checked~.state:before{border-color:#5a656b;background-color:#5a656b !important}.pretty.p-switch.p-fill input:checked~.state label:before{opacity:0}.pretty.p-switch.p-fill input:checked~.state label:after{background-color:#fff !important;left:1em}.pretty.p-switch.p-slim .state:before{height:.1em;background:#bdc3c7 !important;top:calc(50% - 0.1em)}.pretty.p-switch.p-slim input:checked~.state:before{border-color:#5a656b;background-color:#5a656b !important}.pretty.p-has-hover input:hover~.state:not(.p-is-hover){display:none}.pretty.p-has-hover input:hover~.state.p-is-hover{display:block}.pretty.p-has-hover input:hover~.state.p-is-hover .icon{display:block}.pretty.p-has-focus input:focus~.state label:before{box-shadow:0px 0px 3px 0px #bdc3c7}.pretty.p-has-indeterminate input[type=checkbox]:indeterminate~.state:not(.p-is-indeterminate){display:none}.pretty.p-has-indeterminate input[type=checkbox]:indeterminate~.state.p-is-indeterminate{display:block}.pretty.p-has-indeterminate input[type=checkbox]:indeterminate~.state.p-is-indeterminate .icon{display:block;opacity:1}.pretty.p-toggle .state.p-on{opacity:0;display:none}.pretty.p-toggle .state.p-off,.pretty.p-toggle .state .icon,.pretty.p-toggle .state .svg,.pretty.p-toggle .state img{opacity:1;display:inherit}.pretty.p-toggle .state.p-off .icon{color:#bdc3c7}.pretty.p-toggle input:checked~.state.p-on{opacity:1;display:inherit}.pretty.p-toggle input:checked~.state.p-off{opacity:0;display:none}.pretty.p-plain input:checked~.state label:before,.pretty.p-plain.p-toggle .state label:before{content:none}.pretty.p-plain.p-plain .icon{transform:scale(1.1)}.pretty.p-round .state label:before,.pretty.p-round .state label:after{border-radius:100%}.pretty.p-round.p-icon .state .icon{border-radius:100%;overflow:hidden}.pretty.p-round.p-icon .state .icon:before{transform:scale(0.8)}.pretty.p-curve .state label:before,.pretty.p-curve .state label:after{border-radius:20%}.pretty.p-smooth label:before,.pretty.p-smooth label:after,.pretty.p-smooth .icon,.pretty.p-smooth .svg{transition:all .5s ease}.pretty.p-smooth input:checked+.state label:after{transition:all .3s ease}.pretty.p-smooth input:checked+.state .icon,.pretty.p-smooth input:checked+.state .svg,.pretty.p-smooth input:checked+.state img{animation:zoom .2s ease}.pretty.p-smooth.p-default input:checked+.state label:after{animation:zoom .2s ease}.pretty.p-smooth.p-plain input:checked+.state label:before{content:"";transform:scale(0);transition:all .5s ease}.pretty.p-tada:not(.p-default) input:checked+.state .icon,.pretty.p-tada:not(.p-default) input:checked+.state .svg,.pretty.p-tada:not(.p-default) input:checked+.state img,.pretty.p-tada:not(.p-default) input:checked+.state label:before,.pretty.p-tada:not(.p-default) input:checked+.state label:after{animation:tada .7s cubic-bezier(0.25, 0.46, 0.45, 0.94) 1 alternate;opacity:1}.pretty.p-jelly:not(.p-default) input:checked+.state .icon,.pretty.p-jelly:not(.p-default) input:checked+.state .svg,.pretty.p-jelly:not(.p-default) input:checked+.state img,.pretty.p-jelly:not(.p-default) input:checked+.state label:before,.pretty.p-jelly:not(.p-default) input:checked+.state label:after{animation:jelly .7s cubic-bezier(0.25, 0.46, 0.45, 0.94);opacity:1}.pretty.p-jelly:not(.p-default) input:checked+.state label:before{border-color:transparent}.pretty.p-rotate:not(.p-default) input:checked~.state .icon,.pretty.p-rotate:not(.p-default) input:checked~.state .svg,.pretty.p-rotate:not(.p-default) input:checked~.state img,.pretty.p-rotate:not(.p-default) input:checked~.state label:before,.pretty.p-rotate:not(.p-default) input:checked~.state label:after{animation:rotate .7s cubic-bezier(0.25, 0.46, 0.45, 0.94);opacity:1}.pretty.p-rotate:not(.p-default) input:checked~.state label:before{border-color:transparent}.pretty.p-pulse:not(.p-switch) input:checked~.state label:before{animation:pulse 1s}.pretty input[disabled]{cursor:not-allowed;display:none}.pretty input[disabled]~*{opacity:.5}.pretty.p-locked input{display:none;cursor:not-allowed}.pretty input:checked~.state.p-primary label:after,.pretty.p-toggle .state.p-primary label:after{background-color:#428bca !important}.pretty input:checked~.state.p-primary .icon,.pretty input:checked~.state.p-primary .svg,.pretty.p-toggle .state.p-primary .icon,.pretty.p-toggle .state.p-primary .svg{color:#fff;stroke:#fff}.pretty input:checked~.state.p-primary-o label:before,.pretty.p-toggle .state.p-primary-o label:before{border-color:#428bca}.pretty input:checked~.state.p-primary-o label:after,.pretty.p-toggle .state.p-primary-o label:after{background-color:transparent}.pretty input:checked~.state.p-primary-o .icon,.pretty input:checked~.state.p-primary-o .svg,.pretty input:checked~.state.p-primary-o svg,.pretty.p-toggle .state.p-primary-o .icon,.pretty.p-toggle .state.p-primary-o .svg,.pretty.p-toggle .state.p-primary-o svg{color:#428bca;stroke:#428bca}.pretty.p-default:not(.p-fill) input:checked~.state.p-primary-o label:after{background-color:#428bca !important}.pretty.p-switch input:checked~.state.p-primary:before{border-color:#428bca}.pretty.p-switch.p-fill input:checked~.state.p-primary:before{background-color:#428bca !important}.pretty.p-switch.p-slim input:checked~.state.p-primary:before{border-color:#245682;background-color:#245682 !important}.pretty input:checked~.state.p-info label:after,.pretty.p-toggle .state.p-info label:after{background-color:#5bc0de !important}.pretty input:checked~.state.p-info .icon,.pretty input:checked~.state.p-info .svg,.pretty.p-toggle .state.p-info .icon,.pretty.p-toggle .state.p-info .svg{color:#fff;stroke:#fff}.pretty input:checked~.state.p-info-o label:before,.pretty.p-toggle .state.p-info-o label:before{border-color:#5bc0de}.pretty input:checked~.state.p-info-o label:after,.pretty.p-toggle .state.p-info-o label:after{background-color:transparent}.pretty input:checked~.state.p-info-o .icon,.pretty input:checked~.state.p-info-o .svg,.pretty input:checked~.state.p-info-o svg,.pretty.p-toggle .state.p-info-o .icon,.pretty.p-toggle .state.p-info-o .svg,.pretty.p-toggle .state.p-info-o svg{color:#5bc0de;stroke:#5bc0de}.pretty.p-default:not(.p-fill) input:checked~.state.p-info-o label:after{background-color:#5bc0de !important}.pretty.p-switch input:checked~.state.p-info:before{border-color:#5bc0de}.pretty.p-switch.p-fill input:checked~.state.p-info:before{background-color:#5bc0de !important}.pretty.p-switch.p-slim input:checked~.state.p-info:before{border-color:#2390b0;background-color:#2390b0 !important}.pretty input:checked~.state.p-success label:after,.pretty.p-toggle .state.p-success label:after{background-color:#5cb85c !important}.pretty input:checked~.state.p-success .icon,.pretty input:checked~.state.p-success .svg,.pretty.p-toggle .state.p-success .icon,.pretty.p-toggle .state.p-success .svg{color:#fff;stroke:#fff}.pretty input:checked~.state.p-success-o label:before,.pretty.p-toggle .state.p-success-o label:before{border-color:#5cb85c}.pretty input:checked~.state.p-success-o label:after,.pretty.p-toggle .state.p-success-o label:after{background-color:transparent}.pretty input:checked~.state.p-success-o .icon,.pretty input:checked~.state.p-success-o .svg,.pretty input:checked~.state.p-success-o svg,.pretty.p-toggle .state.p-success-o .icon,.pretty.p-toggle .state.p-success-o .svg,.pretty.p-toggle .state.p-success-o svg{color:#5cb85c;stroke:#5cb85c}.pretty.p-default:not(.p-fill) input:checked~.state.p-success-o label:after{background-color:#5cb85c !important}.pretty.p-switch input:checked~.state.p-success:before{border-color:#5cb85c}.pretty.p-switch.p-fill input:checked~.state.p-success:before{background-color:#5cb85c !important}.pretty.p-switch.p-slim input:checked~.state.p-success:before{border-color:#357935;background-color:#357935 !important}.pretty input:checked~.state.p-warning label:after,.pretty.p-toggle .state.p-warning label:after{background-color:#f0ad4e !important}.pretty input:checked~.state.p-warning .icon,.pretty input:checked~.state.p-warning .svg,.pretty.p-toggle .state.p-warning .icon,.pretty.p-toggle .state.p-warning .svg{color:#fff;stroke:#fff}.pretty input:checked~.state.p-warning-o label:before,.pretty.p-toggle .state.p-warning-o label:before{border-color:#f0ad4e}.pretty input:checked~.state.p-warning-o label:after,.pretty.p-toggle .state.p-warning-o label:after{background-color:transparent}.pretty input:checked~.state.p-warning-o .icon,.pretty input:checked~.state.p-warning-o .svg,.pretty input:checked~.state.p-warning-o svg,.pretty.p-toggle .state.p-warning-o .icon,.pretty.p-toggle .state.p-warning-o .svg,.pretty.p-toggle .state.p-warning-o svg{color:#f0ad4e;stroke:#f0ad4e}.pretty.p-default:not(.p-fill) input:checked~.state.p-warning-o label:after{background-color:#f0ad4e !important}.pretty.p-switch input:checked~.state.p-warning:before{border-color:#f0ad4e}.pretty.p-switch.p-fill input:checked~.state.p-warning:before{background-color:#f0ad4e !important}.pretty.p-switch.p-slim input:checked~.state.p-warning:before{border-color:#c77c11;background-color:#c77c11 !important}.pretty input:checked~.state.p-danger label:after,.pretty.p-toggle .state.p-danger label:after{background-color:#d9534f !important}.pretty input:checked~.state.p-danger .icon,.pretty input:checked~.state.p-danger .svg,.pretty.p-toggle .state.p-danger .icon,.pretty.p-toggle .state.p-danger .svg{color:#fff;stroke:#fff}.pretty input:checked~.state.p-danger-o label:before,.pretty.p-toggle .state.p-danger-o label:before{border-color:#d9534f}.pretty input:checked~.state.p-danger-o label:after,.pretty.p-toggle .state.p-danger-o label:after{background-color:transparent}.pretty input:checked~.state.p-danger-o .icon,.pretty input:checked~.state.p-danger-o .svg,.pretty input:checked~.state.p-danger-o svg,.pretty.p-toggle .state.p-danger-o .icon,.pretty.p-toggle .state.p-danger-o .svg,.pretty.p-toggle .state.p-danger-o svg{color:#d9534f;stroke:#d9534f}.pretty.p-default:not(.p-fill) input:checked~.state.p-danger-o label:after{background-color:#d9534f !important}.pretty.p-switch input:checked~.state.p-danger:before{border-color:#d9534f}.pretty.p-switch.p-fill input:checked~.state.p-danger:before{background-color:#d9534f !important}.pretty.p-switch.p-slim input:checked~.state.p-danger:before{border-color:#a02622;background-color:#a02622 !important}.pretty.p-bigger label:before,.pretty.p-bigger label:after,.pretty.p-bigger .icon,.pretty.p-bigger .svg,.pretty.p-bigger .img{font-size:1.2em !important;top:calc((0% - (100% - 1em)) - 35%) !important}.pretty.p-bigger label{text-indent:1.7em}@media print{.pretty .state:before,.pretty .state label:before,.pretty .state label:after,.pretty .state .icon{color-adjust:exact;-webkit-print-color-adjust:exact;print-color-adjust:exact}}',""]),e.exports=t},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var i=n(20);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,"\nh3[data-v-24dcaec2] {\n  margin: 40px 0 0;\n}\nul[data-v-24dcaec2] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-24dcaec2] {\n  display: inline-block;\n  margin: 0 10px;\n}\na[data-v-24dcaec2] {\n  color: #42b983;\n}\n",""]),e.exports=t},function(e,t,n){"use strict";var i=n(21);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".heading[data-v-f1017644]{margin-top:.5rem;margin-bottom:1.5rem;display:flex;align-items:center}.back-button[data-v-f1017644]{padding:4px;margin-right:4px;border-radius:50%;cursor:pointer}.back-button[data-v-f1017644]:hover{background:rgba(0,0,0,.06)}h1[data-v-f1017644]{margin-bottom:0;font-weight:500;font-size:24px;color:#424242}.icon[data-v-f1017644]{cursor:pointer;color:#424242;margin-left:auto;font-size:30px;vertical-align:text-top}img[data-v-f1017644]{height:29px;margin-right:.5rem}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(22);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".button[data-v-82c267d8]{cursor:pointer;display:block;padding:1rem;margin:.5rem 0;border-radius:8px;background:#f0f0f0;color:#505050;text-align:center;display:block;text-decoration:none;transition:filter .1s ease-out}.button[data-v-82c267d8]:active{filter:brightness(0.925);transition:filter 0s linear}.button[disabled][data-v-82c267d8]{opacity:.7;pointer-events:none;cursor:initial}.button.gradient[data-v-82c267d8]{background:linear-gradient(90deg, #FA4821 0%, #AE0F56 100%);color:#fff}.button .material-icons[data-v-82c267d8]{vertical-align:text-top;font-size:18px;margin-right:.25rem}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(23);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".container[data-v-ff9f0e22]{padding:1rem}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(24);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,'*{margin:0;padding:0}#app{font-size:16px;font-family:"Roboto",sans-serif;width:340px;height:425px;color:#585858}h1,h2,h3,h4,h5,p{margin-bottom:1.5rem}h3{font-weight:500}hr{margin:1rem 0;border:none;border-bottom:2px solid #f0f0f0}.row{display:flex;margin:0 -0.5rem}.col{margin:0 .5rem;width:100%}.router-view{position:absolute;transition:all .5s cubic-bezier(0.55, 0, 0.1, 1);width:100%;height:100%}.slide-left-enter,.slide-right-leave-active{-webkit-transform:translate(100vw, 0);transform:translate(100vw, 0)}.slide-left-leave-active,.slide-right-enter{-webkit-transform:translate(-100vw, 0);transform:translate(-100vw, 0)}footer{position:absolute;width:calc(100% - 2rem);padding:1rem;bottom:0;display:flex;justify-content:space-between;opacity:.5;margin-top:1rem}footer span,footer a{color:#000;font-size:12px}',""]),e.exports=t},function(e,t,n){"use strict";var i=n(25);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".page-button[data-v-26ffaf03]{cursor:pointer;display:block;padding:1rem;margin:.5rem 0;border-radius:8px;background:#f0f0f0;color:#505050;text-align:center;display:block;text-decoration:none;transition:filter .1s ease-out}.page-button .icon[data-v-26ffaf03]{vertical-align:text-top;font-size:24px;margin-right:.25rem;margin-top:-4px}.page-button .icon.next[data-v-26ffaf03]{float:right}.page-button .icon.previous[data-v-26ffaf03]{float:left}.page-button[data-v-26ffaf03]:active{filter:brightness(0.925);transition:filter 0s linear}.page-button[disabled][data-v-26ffaf03]{opacity:.7;pointer-events:none;cursor:initial}.page-button.gradient[data-v-26ffaf03]{background:linear-gradient(90deg, #FA4821 0%, #AE0F56 100%);color:#fff}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(26);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".container[data-v-55bb55d9]{padding:1rem}.icon[data-v-55bb55d9]{float:left;margin-right:4px;margin-top:-2px}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(27);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".container[data-v-66c1a282]{padding:1rem}h3[data-v-66c1a282]{margin-bottom:.5rem}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(28);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".container[data-v-e2861696]{padding:1rem}.components[data-v-e2861696]{height:250px;overflow-y:scroll;position:relative;padding:0 4px}.components .component[data-v-e2861696]{padding:.5rem;border-bottom:rgba(0,0,0,.1) solid 1px}.components[data-v-e2861696] :last-child{border-bottom:none}.components[data-v-e2861696]::-webkit-scrollbar,.components[data-v-e2861696]::-webkit-scrollbar-thumb{width:5px;background:rgba(0,0,0,.075);border-radius:5px}.pretty[data-v-e2861696]{float:right;margin-right:0}.pretty .state[data-v-e2861696]::before{top:calc((0% - (100% - 1em)) - 16% + 1px)}.icon[data-v-e2861696]{float:left;margin-right:4px;margin-top:-2px}",""]),e.exports=t},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function a(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new a(o.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new a(o.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(90),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(36))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,o,a,r,s,c=1,l={},p=!1,u=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick((function(){h(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){h(e.data)},i=function(e){a.port2.postMessage(e)}):u&&"onreadystatechange"in u.createElement("script")?(o=u.documentElement,i=function(e){var t=u.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):i=function(e){setTimeout(h,0,e)}:(r="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(r)&&h(+t.data.slice(r.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(r+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return l[c]=o,i(c),c++},d.clearImmediate=f}function f(e){delete l[e]}function h(e){if(p)setTimeout(h,0,e);else{var t=l[e];if(t){p=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{f(e),p=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(36),n(91))},function(e,t){var n,i,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{i="function"==typeof clearTimeout?clearTimeout:r}catch(e){i=r}}();var c,l=[],p=!1,u=-1;function d(){p&&c&&(p=!1,c.length?l=c.concat(l):u=-1,l.length&&f())}function f(){if(!p){var e=s(d);p=!0;for(var t=l.length;t;){for(c=l,l=[];++u<t;)c&&c[u].run();u=-1,t=l.length}c=null,p=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===r||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||p||s(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var i=n(29),o=function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"app"}},[t("transition",{attrs:{name:this.transitionName}},[t("router-view",{staticClass:"router-view"})],1),this._v(" "),t("footer",[t("span",[this._v("Stadia+ 2.3.4")]),this._v(" "),t("span",{domProps:{innerHTML:this._s(this.credit)}})])],1)};o._withStripped=!0;var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"hello"},[n("h1",[e._v(e._s(e.msg))]),e._v(" "),e._m(0),e._v(" "),n("h3",[e._v("Installed CLI Plugins")]),e._v(" "),n("ul"),e._v(" "),n("h3",[e._v("Essential Links")]),e._v(" "),e._m(1),e._v(" "),n("h3",[e._v("Ecosystem")]),e._v(" "),e._m(2)])};a._withStripped=!0;var r={name:"HelloWorld",props:{msg:String}};n(71);function s(e,t,n,i,o,a,r,s){var c,l="function"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=n,l._compiled=!0),i&&(l.functional=!0),a&&(l._scopeId="data-v-"+a),r?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},l._ssrRegister=c):o&&(c=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),c)if(l.functional){l._injectStyles=c;var p=l.render;l.render=function(e,t){return c.call(t),p(e,t)}}else{var u=l.beforeCreate;l.beforeCreate=u?[].concat(u,c):[c]}return{exports:e,options:l}}var c=s(r,a,[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("\n    For a guide and recipes on how to configure / customize this project,"),t("br"),this._v("\n    check out the\n    "),t("a",{attrs:{href:"https://cli.vuejs.org",target:"_blank",rel:"noopener"}},[this._v("vue-cli documentation")]),this._v(".\n  ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("a",{attrs:{href:"https://vuejs.org",target:"_blank",rel:"noopener"}},[e._v("Core Docs")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://forum.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("Forum")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://chat.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("Community Chat")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://twitter.com/vuejs",target:"_blank",rel:"noopener"}},[e._v("Twitter")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://news.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("News")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("a",{attrs:{href:"https://router.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("vue-router")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://vuex.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("vuex")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/vuejs/vue-devtools#vue-devtools",target:"_blank",rel:"noopener"}},[e._v("vue-devtools")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://vue-loader.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("vue-loader")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/vuejs/awesome-vue",target:"_blank",rel:"noopener"}},[e._v("awesome-vue")])])])}],!1,null,"24dcaec2",null);c.options.__file="src/popup/src/components/HelloWorld.vue";var l=c.exports,p=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"main-page"},[n("div",{staticClass:"container"},[n("page-header",{attrs:{img:e.logo,icon:"settings"},on:{"icon-click":e.settings}},[e._v(e._s(e.Language.get("popup.main-page.title")))]),e._v(" "),n("p",[e._v("\n            "+e._s(e.Language.get("popup.main-page.ready-text"))+"\n        ")]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("btn",{attrs:{gradient:!0},on:{click:function(t){return e.open("https://stadia.google.com")}}},[n("icon",[e._v("launch")]),e._v("\n                    "+e._s(e.Language.get("popup.main-page.launch-button"))+"\n                ")],1)],1)]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("btn",{on:{click:function(t){return e.open("https://github.com/Mafrans/StadiaPlus/wiki")}}},[n("icon",[e._v("help_outline")]),e._v("\n                    "+e._s(e.Language.get("popup.main-page.help-button"))+"\n                ")],1)],1)]),e._v(" "),n("hr"),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("btn",{on:{click:function(t){return e.open("https://discord.gg/2VDbEQ8")}}},[e._v("\n                    "+e._s(e.Language.get("popup.main-page.discord"))+"\n                ")])],1),e._v(" "),n("div",{staticClass:"col"},[n("btn",{on:{click:function(t){return e.open("https://github.com/Mafrans/StadiaPlus")}}},[e._v("\n                    "+e._s(e.Language.get("popup.main-page.github"))+"\n                ")])],1)])],1)])};p._withStripped=!0;var u=function(){var e=this.$createElement;return(this._self._c||e)("span",{staticClass:"material-icons",on:{click:this.click}},[this._t("default")],2)};u._withStripped=!0;var d=s({methods:{click(){this.$emit("click")}}},u,[],!1,null,null,null);d.options.__file="src/popup/src/components/Icon.vue";var f=d.exports,h=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"heading"},[e.backButton?n("icon",{staticClass:"back-button",on:{click:e.back}},[e._v("arrow_back")]):n("img",{attrs:{src:e.img,alt:"Header image"}}),e._v(" "),n("h1",[e._t("default")],2),e._v(" "),n("icon",{staticClass:"icon",on:{click:e.iconClick}},[e._v(e._s(e.icon))])],1)};h._withStripped=!0;var m={components:{Icon:f},props:["icon","img","back-button"],methods:{iconClick(){this.$emit("icon-click")},back(){this.$router.go(-1)}}},g=(n(73),s(m,h,[],!1,null,"f1017644",null));g.options.__file="src/popup/src/components/PageHeader.vue";var v=g.exports,b=function(){var e=this.$createElement;return(this._self._c||e)("div",{staticClass:"button",class:{gradient:this.gradient},on:{click:this.click}},[this._t("default")],2)};b._withStripped=!0;var y={props:["gradient"],methods:{click(){this.$emit("click")}}},w=(n(75),s(y,b,[],!1,null,"82c267d8",null));w.options.__file="src/popup/src/components/Button.vue";var _=w.exports,k=n.p+"f290a85efd04679ba441c9ea85ccc52a.png",x=n(0),S={data:()=>({logo:k,Language:x.a}),components:{Icon:f,PageHeader:v,btn:_},methods:{settings(){this.$router.push("settings")},open(e){window.open(e,"_blank")}}},C=(n(77),s(S,p,[],!1,null,"ff9f0e22",null));C.options.__file="src/popup/src/MainPage.vue";var O=C.exports,A=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("select",{ref:"selectbox"},e._l(e.items,(function(t,i){return n("option",{key:i,domProps:{value:t.value}},[e._v("\n        "+e._s(t.label)+"\n    ")])})),0)};A._withStripped=!0;var T=n(5),L=s({props:["placeholder","items","selectstyle","selected"],mounted(){const e=new T.a(this.$refs.selectbox,{placeholder:this.placeholder,style:void 0!==this.selectstyle?this.selectstyle:T.b.SLIMSELECT,onChange:e=>{this.$emit("change",e)},beforeChange:e=>{this.$emit("before-change",e)}});void 0!==this.selected&&e.set(this.selected.tag)}},A,[],!1,null,null,null);L.options.__file="src/popup/src/components/SelectBox.vue";var E=L.exports,M={name:"App",data:()=>({transitionName:"slide-left",credit:x.a.get("popup.footer.credit",{name:'<a href="https://reddit.com/u/Mafrans">Mafrans</a>'})}),watch:{$route(e,t){const n=e.path.split("/").filter(e=>""!==e).length,i=t.path.split("/").filter(e=>""!==e).length;this.transitionName=n<i?"slide-right":"slide-left"}},components:{HelloWorld:l,SelectBox:E,MainPage:O}},j=(n(79),s(M,o,[],!1,null,null,null));j.options.__file="src/popup/src/App.vue";var $=j.exports,P=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"settings-page"},[n("div",{staticClass:"container"},[n("page-header",{attrs:{"back-button":!0,icon:"code"},on:{"icon-click":e.developer}},[e._v(e._s(e.Language.get("popup.settings-page.title")))]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("icon",{staticClass:"icon"},[e._v("language")]),e._v(" "),n("h3",{style:{marginBottom:"0.5rem"}},[e._v("\n                    "+e._s(e.Language.get("popup.settings-page.language"))+"\n                ")]),e._v(" "),n("select-box",{attrs:{items:e.languages,selected:e.currentLanguage,selectstyle:e.SelectStyle.SLIMSELECT_LARGE},on:{change:e.changeLanguage}})],1)]),e._v(" "),n("div",{staticClass:"row",style:{marginTop:"1.25rem"}},[n("div",{staticClass:"col"},[n("icon",{staticClass:"icon"},[e._v("extension")]),e._v(" "),n("h3",{style:{marginBottom:"0.5rem"}},[e._v("\n                    "+e._s(e.Language.get("popup.settings-page.components"))+"\n                ")]),e._v(" "),n("page-button",{attrs:{next:"settings/components"}},[e._v(e._s(e.Language.get("popup.settings-page.edit-components")))])],1)])],1)])};P._withStripped=!0;var D=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("router-link",{staticClass:"page-button",attrs:{to:e.destination}},[e.previous?n("icon",{staticClass:"previous icon"},[e._v("navigate_previous")]):e._e(),e._v(" "),e._t("default"),e._v(" "),e.next?n("icon",{staticClass:"next icon"},[e._v("navigate_next")]):e._e()],2)};D._withStripped=!0;var I={props:["next","previous"],components:{Icon:f},data:()=>({destination:null}),created(){this.destination=this.next?this.next:this.previous?this.previous:null}},R=(n(81),s(I,D,[],!1,null,"26ffaf03",null));R.options.__file="src/popup/src/components/PageButton.vue";var N=R.exports,F=n(1),z={data:()=>({Language:x.a,logo:k,languages:x.a.languages.map(e=>({value:e.tag,label:e.name})),currentLanguage:x.a.current,SelectStyle:T.b}),components:{Icon:f,PageHeader:v,btn:_,SelectBox:E,PageButton:N},methods:{developer(){this.$router.push("settings/developer")},open(e){window.open(e,"_blank")},changeLanguage(e){let t=e.value;"automatic"===t&&(t=x.a.automatic()),F.c.LANGUAGE.set(t),x.a.current=x.a.languages.find(t=>t.tag===e.value),this.$forceUpdate()}}},H=(n(83),s(z,P,[],!1,null,"55bb55d9",null));H.options.__file="src/popup/src/SettingsPage.vue";var B=H.exports,U=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"developer-page"},[n("div",{staticClass:"container"},[n("page-header",{attrs:{"back-button":!0}},[e._v(e._s(e.Language.get("popup.developer-page.title")))]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("h3",[e._v(e._s(e.Language.get("popup.developer-page.storage")))]),e._v(" "),n("btn",{on:{click:function(t){return e.clearStorage()}}},[n("icon",[e._v("clear_all")]),e._v("\n                    "+e._s(e.Language.get("popup.developer-page.clear-cache-button"))+"\n                ")],1)],1)])],1)])};U._withStripped=!0;var V={data:()=>({Language:x.a}),components:{Icon:f,PageHeader:v,btn:_},methods:{clearStorage(){F.a.clear(),F.c.clear()}}},q=(n(85),s(V,U,[],!1,null,"66c1a282",null));q.options.__file="src/popup/src/DeveloperPage.vue";var J=q.exports,K=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"component-page"},[n("div",{staticClass:"container"},[n("page-header",{attrs:{"back-button":!0}},[e._v(e._s(e.Language.get("popup.component-page.title")))]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[void 0===e.components||null===e.components?n("div",{staticClass:"muted"},[e._v("\n                    Hey there! This page isn't available yet as the components haven't been loaded. Go to "),n("a",{attrs:{href:"stadia.google.com"}},[e._v("stadia.google.com")]),e._v(" and log in to enable this feature.\n                ")]):n("div",{staticClass:"components"},e._l(Object.keys(e.components),(function(t){return n("div",{key:t,staticClass:"component"},[n("span",{staticClass:"label"},[e._v(e._s(e.Language.get(t+".name")))]),e._v(" "),n("div",{staticClass:"pretty p-switch p-fill"},[n("input",{attrs:{type:"checkbox"},domProps:{checked:e.components[t].enabled},on:{click:function(n){e.components[t].enabled=!e.components[t].enabled}}}),e._v(" "),e._m(0,!0)])])})),0)])]),e._v(" "),void 0!==e.components&&null!==e.components?n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("btn",{on:{click:e.apply}},[e._v("Apply")])],1)]):e._e()],1)])};K._withStripped=!0;n(19),n(34);var G={data:()=>({Language:x.a,logo:k,components:null}),components:{Icon:f,PageHeader:v,btn:_,SelectBox:E,PageButton:N},methods:{apply(){F.c.COMPONENTS.set(this.components)}},created(){F.c.COMPONENTS.get(e=>{this.components=e.components})}},W=(n(87),s(G,K,[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"state"},[t("label",[this._v("​")])])}],!1,null,"e2861696",null));W.options.__file="src/popup/src/ComponentPage.vue";var Q=W.exports;
/*!
  * vue-router v3.1.6
  * (c) 2020 Evan You
  * @license MIT
  */function X(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Z(e,t){return t instanceof e||t&&(t.name===e.name||t._name===e._name)}function Y(e,t){for(var n in t)e[n]=t[n];return e}var ee={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,i=t.children,o=t.parent,a=t.data;a.routerView=!0;for(var r=o.$createElement,s=n.name,c=o.$route,l=o._routerViewCache||(o._routerViewCache={}),p=0,u=!1;o&&o._routerRoot!==o;){var d=o.$vnode?o.$vnode.data:{};d.routerView&&p++,d.keepAlive&&o._directInactive&&o._inactive&&(u=!0),o=o.$parent}if(a.routerViewDepth=p,u){var f=l[s],h=f&&f.component;return h?(f.configProps&&te(h,a,f.route,f.configProps),r(h,a,i)):r()}var m=c.matched[p],g=m&&m.components[s];if(!m||!g)return l[s]=null,r();l[s]={component:g},a.registerRouteInstance=function(e,t){var n=m.instances[s];(t&&n!==e||!t&&n===e)&&(m.instances[s]=t)},(a.hook||(a.hook={})).prepatch=function(e,t){m.instances[s]=t.componentInstance},a.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==m.instances[s]&&(m.instances[s]=e.componentInstance)};var v=m.props&&m.props[s];return v&&(Y(l[s],{route:c,configProps:v}),te(g,a,c,v)),r(g,a,i)}};function te(e,t,n,i){var o=t.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0;default:0}}(n,i);if(o){o=t.props=Y({},o);var a=t.attrs=t.attrs||{};for(var r in o)e.props&&r in e.props||(a[r]=o[r],delete o[r])}}var ne=/[!'()*]/g,ie=function(e){return"%"+e.charCodeAt(0).toString(16)},oe=/%2C/g,ae=function(e){return encodeURIComponent(e).replace(ne,ie).replace(oe,",")},re=decodeURIComponent;function se(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var n=e.replace(/\+/g," ").split("="),i=re(n.shift()),o=n.length>0?re(n.join("=")):null;void 0===t[i]?t[i]=o:Array.isArray(t[i])?t[i].push(o):t[i]=[t[i],o]})),t):t}function ce(e){var t=e?Object.keys(e).map((function(t){var n=e[t];if(void 0===n)return"";if(null===n)return ae(t);if(Array.isArray(n)){var i=[];return n.forEach((function(e){void 0!==e&&(null===e?i.push(ae(t)):i.push(ae(t)+"="+ae(e)))})),i.join("&")}return ae(t)+"="+ae(n)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var le=/\/?$/;function pe(e,t,n,i){var o=i&&i.options.stringifyQuery,a=t.query||{};try{a=ue(a)}catch(e){}var r={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:a,params:t.params||{},fullPath:he(t,o),matched:e?fe(e):[]};return n&&(r.redirectedFrom=he(n,o)),Object.freeze(r)}function ue(e){if(Array.isArray(e))return e.map(ue);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=ue(e[n]);return t}return e}var de=pe(null,{path:"/"});function fe(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function he(e,t){var n=e.path,i=e.query;void 0===i&&(i={});var o=e.hash;return void 0===o&&(o=""),(n||"/")+(t||ce)(i)+o}function me(e,t){return t===de?e===t:!!t&&(e.path&&t.path?e.path.replace(le,"")===t.path.replace(le,"")&&e.hash===t.hash&&ge(e.query,t.query):!(!e.name||!t.name)&&(e.name===t.name&&e.hash===t.hash&&ge(e.query,t.query)&&ge(e.params,t.params)))}function ge(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e),i=Object.keys(t);return n.length===i.length&&n.every((function(n){var i=e[n],o=t[n];return"object"==typeof i&&"object"==typeof o?ge(i,o):String(i)===String(o)}))}function ve(e,t,n){var i=e.charAt(0);if("/"===i)return e;if("?"===i||"#"===i)return t+e;var o=t.split("/");n&&o[o.length-1]||o.pop();for(var a=e.replace(/^\//,"").split("/"),r=0;r<a.length;r++){var s=a[r];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function be(e){return e.replace(/\/\//g,"/")}var ye=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},we=Pe,_e=Oe,ke=function(e,t){return Te(Oe(e,t))},xe=Te,Se=$e,Ce=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Oe(e,t){for(var n,i=[],o=0,a=0,r="",s=t&&t.delimiter||"/";null!=(n=Ce.exec(e));){var c=n[0],l=n[1],p=n.index;if(r+=e.slice(a,p),a=p+c.length,l)r+=l[1];else{var u=e[a],d=n[2],f=n[3],h=n[4],m=n[5],g=n[6],v=n[7];r&&(i.push(r),r="");var b=null!=d&&null!=u&&u!==d,y="+"===g||"*"===g,w="?"===g||"*"===g,_=n[2]||s,k=h||m;i.push({name:f||o++,prefix:d||"",delimiter:_,optional:w,repeat:y,partial:b,asterisk:!!v,pattern:k?Ee(k):v?".*":"[^"+Le(_)+"]+?"})}}return a<e.length&&(r+=e.substr(a)),r&&i.push(r),i}function Ae(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Te(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,i){for(var o="",a=n||{},r=(i||{}).pretty?Ae:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var l,p=a[c.name];if(null==p){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(ye(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var u=0;u<p.length;u++){if(l=r(p[u]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");o+=(0===u?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(p),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');o+=c.prefix+l}}else o+=c}return o}}function Le(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Ee(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Me(e,t){return e.keys=t,e}function je(e){return e.sensitive?"":"i"}function $e(e,t,n){ye(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,o=!1!==n.end,a="",r=0;r<e.length;r++){var s=e[r];if("string"==typeof s)a+=Le(s);else{var c=Le(s.prefix),l="(?:"+s.pattern+")";t.push(s),s.repeat&&(l+="(?:"+c+l+")*"),a+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var p=Le(n.delimiter||"/"),u=a.slice(-p.length)===p;return i||(a=(u?a.slice(0,-p.length):a)+"(?:"+p+"(?=$))?"),a+=o?"$":i&&u?"":"(?="+p+"|$)",Me(new RegExp("^"+a,je(n)),t)}function Pe(e,t,n){return ye(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var i=0;i<n.length;i++)t.push({name:i,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Me(e,t)}(e,t):ye(e)?function(e,t,n){for(var i=[],o=0;o<e.length;o++)i.push(Pe(e[o],t,n).source);return Me(new RegExp("(?:"+i.join("|")+")",je(n)),t)}(e,t,n):function(e,t,n){return $e(Oe(e,n),t,n)}(e,t,n)}we.parse=_e,we.compile=ke,we.tokensToFunction=xe,we.tokensToRegExp=Se;var De=Object.create(null);function Ie(e,t,n){t=t||{};try{var i=De[e]||(De[e]=we.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),i(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function Re(e,t,n,i){var o="string"==typeof e?{path:e}:e;if(o._normalized)return o;if(o.name){var a=(o=Y({},e)).params;return a&&"object"==typeof a&&(o.params=Y({},a)),o}if(!o.path&&o.params&&t){(o=Y({},o))._normalized=!0;var r=Y(Y({},t.params),o.params);if(t.name)o.name=t.name,o.params=r;else if(t.matched.length){var s=t.matched[t.matched.length-1].path;o.path=Ie(s,r,t.path)}else 0;return o}var c=function(e){var t="",n="",i=e.indexOf("#");i>=0&&(t=e.slice(i),e=e.slice(0,i));var o=e.indexOf("?");return o>=0&&(n=e.slice(o+1),e=e.slice(0,o)),{path:e,query:n,hash:t}}(o.path||""),l=t&&t.path||"/",p=c.path?ve(c.path,l,n||o.append):l,u=function(e,t,n){void 0===t&&(t={});var i,o=n||se;try{i=o(e||"")}catch(e){i={}}for(var a in t)i[a]=t[a];return i}(c.query,o.query,i&&i.options.parseQuery),d=o.hash||c.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:p,query:u,hash:d}}var Ne,Fe=function(){},ze={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:[String,Array],default:"click"}},render:function(e){var t=this,n=this.$router,i=this.$route,o=n.resolve(this.to,i,this.append),a=o.location,r=o.route,s=o.href,c={},l=n.options.linkActiveClass,p=n.options.linkExactActiveClass,u=null==l?"router-link-active":l,d=null==p?"router-link-exact-active":p,f=null==this.activeClass?u:this.activeClass,h=null==this.exactActiveClass?d:this.exactActiveClass,m=r.redirectedFrom?pe(null,Re(r.redirectedFrom),null,n):r;c[h]=me(i,m),c[f]=this.exact?c[h]:function(e,t){return 0===e.path.replace(le,"/").indexOf(t.path.replace(le,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(i,m);var g=function(e){He(e)&&(t.replace?n.replace(a,Fe):n.push(a,Fe))},v={click:He};Array.isArray(this.event)?this.event.forEach((function(e){v[e]=g})):v[this.event]=g;var b={class:c},y=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:r,navigate:g,isActive:c[f],isExactActive:c[h]});if(y){if(1===y.length)return y[0];if(y.length>1||!y.length)return 0===y.length?e():e("span",{},y)}if("a"===this.tag)b.on=v,b.attrs={href:s};else{var w=function e(t){var n;if(t)for(var i=0;i<t.length;i++){if("a"===(n=t[i]).tag)return n;if(n.children&&(n=e(n.children)))return n}}(this.$slots.default);if(w){w.isStatic=!1;var _=w.data=Y({},w.data);for(var k in _.on=_.on||{},_.on){var x=_.on[k];k in v&&(_.on[k]=Array.isArray(x)?x:[x])}for(var S in v)S in _.on?_.on[S].push(v[S]):_.on[S]=g;(w.data.attrs=Y({},w.data.attrs)).href=s}else b.on=v}return e(this.tag,b,this.$slots.default)}};function He(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}var Be="undefined"!=typeof window;function Ue(e,t,n,i){var o=t||[],a=n||Object.create(null),r=i||Object.create(null);e.forEach((function(e){!function e(t,n,i,o,a,r){var s=o.path,c=o.name;0;var l=o.pathToRegexpOptions||{},p=function(e,t,n){n||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==t)return e;return be(t.path+"/"+e)}(s,a,l.strict);"boolean"==typeof o.caseSensitive&&(l.sensitive=o.caseSensitive);var u={path:p,regex:Ve(p,l),components:o.components||{default:o.component},instances:{},name:c,parent:a,matchAs:r,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var a=r?be(r+"/"+o.path):void 0;e(t,n,i,o,u,a)}));n[u.path]||(t.push(u.path),n[u.path]=u);if(void 0!==o.alias)for(var d=Array.isArray(o.alias)?o.alias:[o.alias],f=0;f<d.length;++f){0;var h={path:d[f],children:o.children};e(t,n,i,h,a,u.path||"/")}c&&(i[c]||(i[c]=u))}(o,a,r,e)}));for(var s=0,c=o.length;s<c;s++)"*"===o[s]&&(o.push(o.splice(s,1)[0]),c--,s--);return{pathList:o,pathMap:a,nameMap:r}}function Ve(e,t){return we(e,[],t)}function qe(e,t){var n=Ue(e),i=n.pathList,o=n.pathMap,a=n.nameMap;function r(e,n,r){var s=Re(e,n,!1,t),l=s.name;if(l){var p=a[l];if(!p)return c(null,s);var u=p.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),n&&"object"==typeof n.params)for(var d in n.params)!(d in s.params)&&u.indexOf(d)>-1&&(s.params[d]=n.params[d]);return s.path=Ie(p.path,s.params),c(p,s,r)}if(s.path){s.params={};for(var f=0;f<i.length;f++){var h=i[f],m=o[h];if(Je(m.regex,s.path,s.params))return c(m,s,r)}}return c(null,s)}function s(e,n){var i=e.redirect,o="function"==typeof i?i(pe(e,n,null,t)):i;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return c(null,n);var s=o,l=s.name,p=s.path,u=n.query,d=n.hash,f=n.params;if(u=s.hasOwnProperty("query")?s.query:u,d=s.hasOwnProperty("hash")?s.hash:d,f=s.hasOwnProperty("params")?s.params:f,l){a[l];return r({_normalized:!0,name:l,query:u,hash:d,params:f},void 0,n)}if(p){var h=function(e,t){return ve(e,t.parent?t.parent.path:"/",!0)}(p,e);return r({_normalized:!0,path:Ie(h,f),query:u,hash:d},void 0,n)}return c(null,n)}function c(e,n,i){return e&&e.redirect?s(e,i||n):e&&e.matchAs?function(e,t,n){var i=r({_normalized:!0,path:Ie(n,t.params)});if(i){var o=i.matched,a=o[o.length-1];return t.params=i.params,c(a,t)}return c(null,t)}(0,n,e.matchAs):pe(e,n,i,t)}return{match:r,addRoutes:function(e){Ue(e,i,o,a)}}}function Je(e,t,n){var i=t.match(e);if(!i)return!1;if(!n)return!0;for(var o=1,a=i.length;o<a;++o){var r=e.keys[o-1],s="string"==typeof i[o]?decodeURIComponent(i[o]):i[o];r&&(n[r.name||"pathMatch"]=s)}return!0}var Ke=Be&&window.performance&&window.performance.now?window.performance:Date;function Ge(){return Ke.now().toFixed(3)}var We=Ge();function Qe(){return We}function Xe(e){return We=e}var Ze=Object.create(null);function Ye(){var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,""),n=Y({},window.history.state);n.key=Qe(),window.history.replaceState(n,"",t),window.addEventListener("popstate",(function(e){tt(),e.state&&e.state.key&&Xe(e.state.key)}))}function et(e,t,n,i){if(e.app){var o=e.options.scrollBehavior;o&&e.app.$nextTick((function(){var a=function(){var e=Qe();if(e)return Ze[e]}(),r=o.call(e,t,n,i?a:null);r&&("function"==typeof r.then?r.then((function(e){rt(e,a)})).catch((function(e){0})):rt(r,a))}))}}function tt(){var e=Qe();e&&(Ze[e]={x:window.pageXOffset,y:window.pageYOffset})}function nt(e){return ot(e.x)||ot(e.y)}function it(e){return{x:ot(e.x)?e.x:window.pageXOffset,y:ot(e.y)?e.y:window.pageYOffset}}function ot(e){return"number"==typeof e}var at=/^#\d/;function rt(e,t){var n,i="object"==typeof e;if(i&&"string"==typeof e.selector){var o=at.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(o){var a=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),i=e.getBoundingClientRect();return{x:i.left-n.left-t.x,y:i.top-n.top-t.y}}(o,a={x:ot((n=a).x)?n.x:0,y:ot(n.y)?n.y:0})}else nt(e)&&(t=it(e))}else i&&nt(e)&&(t=it(e));t&&window.scrollTo(t.x,t.y)}var st,ct=Be&&((-1===(st=window.navigator.userAgent).indexOf("Android 2.")&&-1===st.indexOf("Android 4.0")||-1===st.indexOf("Mobile Safari")||-1!==st.indexOf("Chrome")||-1!==st.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history);function lt(e,t){tt();var n=window.history;try{if(t){var i=Y({},n.state);i.key=Qe(),n.replaceState(i,"",e)}else n.pushState({key:Xe(Ge())},"",e)}catch(n){window.location[t?"replace":"assign"](e)}}function pt(e){lt(e,!0)}function ut(e,t,n){var i=function(o){o>=e.length?n():e[o]?t(e[o],(function(){i(o+1)})):i(o+1)};i(0)}function dt(e){return function(t,n,i){var o=!1,a=0,r=null;ft(e,(function(e,t,n,s){if("function"==typeof e&&void 0===e.cid){o=!0,a++;var c,l=gt((function(t){var o;((o=t).__esModule||mt&&"Module"===o[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:Ne.extend(t),n.components[s]=t,--a<=0&&i()})),p=gt((function(e){var t="Failed to resolve async component "+s+": "+e;r||(r=X(e)?e:new Error(t),i(r))}));try{c=e(l,p)}catch(e){p(e)}if(c)if("function"==typeof c.then)c.then(l,p);else{var u=c.component;u&&"function"==typeof u.then&&u.then(l,p)}}})),o||i()}}function ft(e,t){return ht(e.map((function(e){return Object.keys(e.components).map((function(n){return t(e.components[n],e.instances[n],e,n)}))})))}function ht(e){return Array.prototype.concat.apply([],e)}var mt="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function gt(e){var t=!1;return function(){for(var n=[],i=arguments.length;i--;)n[i]=arguments[i];if(!t)return t=!0,e.apply(this,n)}}var vt=function(e){function t(t){e.call(this),this.name=this._name="NavigationDuplicated",this.message='Navigating to current location ("'+t.fullPath+'") is not allowed',Object.defineProperty(this,"stack",{value:(new e).stack,writable:!0,configurable:!0})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Error);vt._name="NavigationDuplicated";var bt=function(e,t){this.router=e,this.base=function(e){if(!e)if(Be){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(t),this.current=de,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function yt(e,t,n,i){var o=ft(e,(function(e,i,o,a){var r=function(e,t){"function"!=typeof e&&(e=Ne.extend(e));return e.options[t]}(e,t);if(r)return Array.isArray(r)?r.map((function(e){return n(e,i,o,a)})):n(r,i,o,a)}));return ht(i?o.reverse():o)}function wt(e,t){if(t)return function(){return e.apply(t,arguments)}}bt.prototype.listen=function(e){this.cb=e},bt.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},bt.prototype.onError=function(e){this.errorCbs.push(e)},bt.prototype.transitionTo=function(e,t,n){var i=this,o=this.router.match(e,this.current);this.confirmTransition(o,(function(){i.updateRoute(o),t&&t(o),i.ensureURL(),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(o)})))}),(function(e){n&&n(e),e&&!i.ready&&(i.ready=!0,i.readyErrorCbs.forEach((function(t){t(e)})))}))},bt.prototype.confirmTransition=function(e,t,n){var i=this,o=this.current,a=function(e){!Z(vt,e)&&X(e)&&(i.errorCbs.length?i.errorCbs.forEach((function(t){t(e)})):console.error(e)),n&&n(e)};if(me(e,o)&&e.matched.length===o.matched.length)return this.ensureURL(),a(new vt(e));var r=function(e,t){var n,i=Math.max(e.length,t.length);for(n=0;n<i&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),s=r.updated,c=r.deactivated,l=r.activated,p=[].concat(function(e){return yt(e,"beforeRouteLeave",wt,!0)}(c),this.router.beforeHooks,function(e){return yt(e,"beforeRouteUpdate",wt)}(s),l.map((function(e){return e.beforeEnter})),dt(l));this.pending=e;var u=function(t,n){if(i.pending!==e)return a();try{t(e,o,(function(e){!1===e||X(e)?(i.ensureURL(!0),a(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(a(),"object"==typeof e&&e.replace?i.replace(e):i.push(e)):n(e)}))}catch(e){a(e)}};ut(p,u,(function(){var n=[];ut(function(e,t,n){return yt(e,"beforeRouteEnter",(function(e,i,o,a){return function(e,t,n,i,o){return function(a,r,s){return e(a,r,(function(e){"function"==typeof e&&i.push((function(){!function e(t,n,i,o){n[i]&&!n[i]._isBeingDestroyed?t(n[i]):o()&&setTimeout((function(){e(t,n,i,o)}),16)}(e,t.instances,n,o)})),s(e)}))}}(e,o,a,t,n)}))}(l,n,(function(){return i.current===e})).concat(i.router.resolveHooks),u,(function(){if(i.pending!==e)return a();i.pending=null,t(e),i.router.app&&i.router.app.$nextTick((function(){n.forEach((function(e){e()}))}))}))}))},bt.prototype.updateRoute=function(e){var t=this.current;this.current=e,this.cb&&this.cb(e),this.router.afterHooks.forEach((function(n){n&&n(e,t)}))};var _t=function(e){function t(t,n){var i=this;e.call(this,t,n);var o=t.options.scrollBehavior,a=ct&&o;a&&Ye();var r=kt(this.base);window.addEventListener("popstate",(function(e){var n=i.current,o=kt(i.base);i.current===de&&o===r||i.transitionTo(o,(function(e){a&&et(t,e,n,!0)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var i=this,o=this.current;this.transitionTo(e,(function(e){lt(be(i.base+e.fullPath)),et(i.router,e,o,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var i=this,o=this.current;this.transitionTo(e,(function(e){pt(be(i.base+e.fullPath)),et(i.router,e,o,!1),t&&t(e)}),n)},t.prototype.ensureURL=function(e){if(kt(this.base)!==this.current.fullPath){var t=be(this.base+this.current.fullPath);e?lt(t):pt(t)}},t.prototype.getCurrentLocation=function(){return kt(this.base)},t}(bt);function kt(e){var t=decodeURI(window.location.pathname);return e&&0===t.indexOf(e)&&(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var xt=function(e){function t(t,n,i){e.call(this,t,n),i&&function(e){var t=kt(e);if(!/^\/#/.test(t))return window.location.replace(be(e+"/#"+t)),!0}(this.base)||St()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this,t=this.router.options.scrollBehavior,n=ct&&t;n&&Ye(),window.addEventListener(ct?"popstate":"hashchange",(function(){var t=e.current;St()&&e.transitionTo(Ct(),(function(i){n&&et(e.router,i,t,!0),ct||Tt(i.fullPath)}))}))},t.prototype.push=function(e,t,n){var i=this,o=this.current;this.transitionTo(e,(function(e){At(e.fullPath),et(i.router,e,o,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var i=this,o=this.current;this.transitionTo(e,(function(e){Tt(e.fullPath),et(i.router,e,o,!1),t&&t(e)}),n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;Ct()!==t&&(e?At(t):Tt(t))},t.prototype.getCurrentLocation=function(){return Ct()},t}(bt);function St(){var e=Ct();return"/"===e.charAt(0)||(Tt("/"+e),!1)}function Ct(){var e=window.location.href,t=e.indexOf("#");if(t<0)return"";var n=(e=e.slice(t+1)).indexOf("?");if(n<0){var i=e.indexOf("#");e=i>-1?decodeURI(e.slice(0,i))+e.slice(i):decodeURI(e)}else e=decodeURI(e.slice(0,n))+e.slice(n);return e}function Ot(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function At(e){ct?lt(Ot(e)):window.location.hash=e}function Tt(e){ct?pt(Ot(e)):window.location.replace(Ot(e))}var Lt=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var i=this;this.transitionTo(e,(function(e){i.stack=i.stack.slice(0,i.index+1).concat(e),i.index++,t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var i=this;this.transitionTo(e,(function(e){i.stack=i.stack.slice(0,i.index).concat(e),t&&t(e)}),n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var i=this.stack[n];this.confirmTransition(i,(function(){t.index=n,t.updateRoute(i)}),(function(e){Z(vt,e)&&(t.index=n)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(bt),Et=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=qe(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!ct&&!1!==e.fallback,this.fallback&&(t="hash"),Be||(t="abstract"),this.mode=t,t){case"history":this.history=new _t(this,e.base);break;case"hash":this.history=new xt(this,e.base,this.fallback);break;case"abstract":this.history=new Lt(this,e.base);break;default:0}},Mt={currentRoute:{configurable:!0}};function jt(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}Et.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},Mt.currentRoute.get=function(){return this.history&&this.history.current},Et.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null)})),!this.app){this.app=e;var n=this.history;if(n instanceof _t)n.transitionTo(n.getCurrentLocation());else if(n instanceof xt){var i=function(){n.setupListeners()};n.transitionTo(n.getCurrentLocation(),i,i)}n.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},Et.prototype.beforeEach=function(e){return jt(this.beforeHooks,e)},Et.prototype.beforeResolve=function(e){return jt(this.resolveHooks,e)},Et.prototype.afterEach=function(e){return jt(this.afterHooks,e)},Et.prototype.onReady=function(e,t){this.history.onReady(e,t)},Et.prototype.onError=function(e){this.history.onError(e)},Et.prototype.push=function(e,t,n){var i=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){i.history.push(e,t,n)}));this.history.push(e,t,n)},Et.prototype.replace=function(e,t,n){var i=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){i.history.replace(e,t,n)}));this.history.replace(e,t,n)},Et.prototype.go=function(e){this.history.go(e)},Et.prototype.back=function(){this.go(-1)},Et.prototype.forward=function(){this.go(1)},Et.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},Et.prototype.resolve=function(e,t,n){var i=Re(e,t=t||this.history.current,n,this),o=this.match(i,t),a=o.redirectedFrom||o.fullPath;return{location:i,route:o,href:function(e,t,n){var i="hash"===n?"#"+t:t;return e?be(e+"/"+i):i}(this.history.base,a,this.mode),normalizedTo:i,resolved:o}},Et.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==de&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Et.prototype,Mt),Et.install=function e(t){if(!e.installed||Ne!==t){e.installed=!0,Ne=t;var n=function(e){return void 0!==e},i=function(e,t){var i=e.$options._parentVnode;n(i)&&n(i=i.data)&&n(i=i.registerRouteInstance)&&i(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,i(this,this)},destroyed:function(){i(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",ee),t.component("RouterLink",ze);var o=t.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Et.version="3.1.6",Be&&window.Vue&&window.Vue.use(Et);var $t=Et;i.a.config.productionTip=!1,i.a.use($t);const Pt=new $t({base:"dist/popup.html",mode:"history",routes:[{path:"/",component:O},{path:"/settings/",component:B},{path:"/settings/developer",component:J},{path:"/settings/components",component:Q}]});x.a.init(),x.a.load(()=>{new i.a({router:Pt,render:e=>e($)}).$mount("#app")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,